+ trap 'cat /sys/fs/cgroup/memory/$(cat /proc/$$/cgroup | grep -oP '\''^.*:memory:\K.*$'\'')/memory.max_usage_in_bytes > /import/ch-sc-swdump2/surajk/artifact_root/apps/ch__jit_bert_bert_base_uncased_inference/run/max_used_host_memory.0 && grep --text -oP "slurmJobId=$SLURM_JOB_ID.*Physical RDU ID: \K\d+" /var/log/sambaflow/runtime/sn.log > /import/ch-sc-swdump2/surajk/artifact_root/apps/ch__jit_bert_bert_base_uncased_inference/run/physical_chip_ids.0 || true' EXIT
+ cd /import/ch-sc-swdump2/surajk/sambaflow_PIaWV9hw0p/frontend/jit/torch_rdu/test/python/
+ ulimit -l unlimited
+ mkdir -p /scratch/surajk/.cache/huggingface
+ export PATH=/usr/local/bin:/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin
+ PATH=/usr/local/bin:/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin
+ export PYTHONPATH=/import/ch-sc-swdump2/surajk/sambaflow_PIaWV9hw0p/venv/lib/python3.7/site-packages:/import/ch-sc-swdump2/surajk/sambaflow_PIaWV9hw0p/sambaflow:/import/ch-sc-swdump2/surajk/sambaflow_PIaWV9hw0p/frontend/jit/torch_rdu/test/python/
+ PYTHONPATH=/import/ch-sc-swdump2/surajk/sambaflow_PIaWV9hw0p/venv/lib/python3.7/site-packages:/import/ch-sc-swdump2/surajk/sambaflow_PIaWV9hw0p/sambaflow:/import/ch-sc-swdump2/surajk/sambaflow_PIaWV9hw0p/frontend/jit/torch_rdu/test/python/
+ export LD_LIBRARY_PATH=/import/ch-sc-swdump2/surajk/sambaflow_PIaWV9hw0p/lib:/opt/llvm12/lib:
+ LD_LIBRARY_PATH=/import/ch-sc-swdump2/surajk/sambaflow_PIaWV9hw0p/lib:/opt/llvm12/lib:
+ export SOFTWARE_HOME=/import/ch-sc-swdump2/surajk/sambaflow_PIaWV9hw0p
+ SOFTWARE_HOME=/import/ch-sc-swdump2/surajk/sambaflow_PIaWV9hw0p
+ export ARTIFACT_ROOT=/import/ch-sc-swdump2/surajk/artifact_root
+ ARTIFACT_ROOT=/import/ch-sc-swdump2/surajk/artifact_root
+ true
+ OMP_NUM_THREADS=8
+ python experiments/bert_base_uncased.py
PyTorch version 1.10.2+cpu available.
TensorFlow version 2.7.0 available.
Some weights of the model checkpoint at bert-base-uncased were not used when initializing BertForMaskedLM: ['cls.seq_relationship.weight', 'cls.seq_relationship.bias']
- This IS expected if you are initializing BertForMaskedLM from the checkpoint of a model trained on another task or with another architecture (e.g. initializing a BertForSequenceClassification model from a BertForPretraining model).
- This IS NOT expected if you are initializing BertForMaskedLM from the checkpoint of a model that you expect to be exactly identical (initializing a BertForSequenceClassification model from a BertForSequenceClassification model).
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887c2830 to: 0x55c8879b07c0
[compiler:info]   Source: 128 bytes with name  0x0
[compiler:info]   Dest: 128 bytes with name  0x0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888776c80 to: 0x55c887614ff0
[compiler:info]   Source: 128 bytes with name  0x0
[compiler:info]   Dest: 128 bytes with name  0x0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88877b920 to: 0x55c888728830
[compiler:info]   Source: 128 bytes with name  0x0
[compiler:info]   Dest: 128 bytes with name  0x0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {30522, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88877c0a0 to: 0x55c8887ce020
[compiler:info]   Source: 93763584 bytes with name  0x55c8887c2900
[compiler:info]   Dest: 93763584 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c896e210d0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {512, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88877c170 to: 0x55c8887ce020
[compiler:info]   Source: 1572864 bytes with name  0x55c88877dc00
[compiler:info]   Dest: 1572864 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c896e210d0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {2, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88879abc0 to: 0x55c8887ce020
[compiler:info]   Source: 6144 bytes with name  0x55c8887a9950
[compiler:info]   Dest: 6144 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c896e210d0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8888862d0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c888879db0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c896e210d0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888759570 to: 0x55c896e210d0
[compiler:info]   Source: 3072 bytes with name  0x55c888759640
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c896e210d0 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 512} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888776d50 to: 0x55c896e210d0
[compiler:info]   Source: 4096 bytes with name  0x0
[compiler:info]   Dest: 4096 bytes with name  0x0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887cb4d0 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c88875c040
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888879950 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888879a20
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888869d70 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c888869e40
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c896e222e0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c896e223b0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c896e22470 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c8887ce510
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887cf2b0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887cf3b0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c896e21560 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c8887cf710
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887cf860 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887cf930
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887cf9f0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887d2500
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887d32a0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887d33a0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887d4430 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c8887d4530
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887d76d0 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c8887d77a0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887d3b40 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c8887d3c40
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887d9160 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887d9260
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887da250 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887da320
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887db0c0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887db1c0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88875b770 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c88875b870
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887d7f20 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887d8020
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887d80e0 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c8887cd810
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887cd8d0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887cd9d0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887cdd40 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c8887cde40
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887e9980 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887cdf60
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887ea1d0 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c8887ea2d0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887ea3f0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887f14b0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887f24d0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887f25a0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887f3340 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887f3440
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887f0d40 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c8887f0e40
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887f0f60 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c8887f1060
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887f1370 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c8887f7b50
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887f88f0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887f89f0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887f99e0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887f9ae0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887fa880 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887fa980
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887f4750 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c88878b580
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88878b6d0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8888796c0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888879780 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c8887cae30
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887caf50 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887fd940
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887fad20 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c8887fae20
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887fbbc0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887fbcc0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887ea4d0 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c8887ea5d0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887eb370 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887eb470
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887ec460 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887ec560
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887ed300 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887ed400
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887fe150 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c8887fe250
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887fe370 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c8887fe470
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887fea30 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c8887feb30
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887fec50 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887fed20
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887fede0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887feeb0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887ee640 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887ee710
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887eec70 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c8888086e0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8888094b0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8888095b0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888809920 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c888809a20
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888809b40 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c888809c40
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888811510 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c8888115e0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888812380 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888812480
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888812c90 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c888812d90
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888813b30 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c888813c30
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888816b60 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c888816c60
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888816d80 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888816e80
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8888173e0 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c8888174e0
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88880fe70 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c88880ff70
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888810530 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c888810630
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888810750 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8993c7ef0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8993c8e80 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8993c8f50
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8993c9c90 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8993c9d60
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888813f40 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c888814040
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888814de0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888814ee0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888815250 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c888815320
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888815440 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c888815510
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888815880 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c888815950
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888815a70 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888815b40
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c899cce9b0 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c899ccea80
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c899ccf7c0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c899ccf890
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c899cd0820 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c899cd08f0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c899cd1630 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c899cd1700
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8993caa40 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c8993cab40
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8993cac60 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c8993cad60
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8993cb320 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c8993cb420
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8993cc1c0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8993cc2c0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8993cc630 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8993cc700
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8993cc820 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8993cc8f0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8993cc9b0 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c8993cca80
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c899f1a610 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c899f1a6e0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a15aa70 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c89a15ab40
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a15b880 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89a15b950
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a39bce0 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c89a39bdb0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a39caf0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89a39cbc0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c899cd2630 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c899cd2730
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c899cd34d0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c899cd35a0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c899cd4590 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c899cd4660
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a5e0730 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89a5e0800
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888800080 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c888800180
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888803320 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c888803420
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8888039e0 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c888803ae0
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888804880 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888804980
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888805970 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888805a70
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888806810 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8888068e0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8888072e0 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c8888073e0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888808180 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888808280
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8888085f0 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c89a39cc80
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a39da20 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89a39db20
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a39de90 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c89a39df60
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a39ed00 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89a39ee00
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a39f610 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c89a39f6e0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a39f800 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89a39f8d0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a39f990 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89aef78a0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89aef85e0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89aef86b0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89aef90b0 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c89aef9180
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89aefc2c0 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c89aefc390
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89aefc8f0 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c89aefc9c0
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89aefd700 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89aefd7d0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89aefe7c0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89aefe890
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89aeff5d0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89aeff6a0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a5f3280 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c89a5f3380
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a5f4120 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89a5f4220
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a5f4590 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c89a5f4660
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a5f5400 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89a5f5500
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a5f5870 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c89a5f5940
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89a5f5a60 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89a5f5b30
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89b804640 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c89b804710
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89b805450 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89b805520
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89b8064b0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89b806580
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89b8072c0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89b807390
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89b807df0 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c89b807ec0
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89b80b000 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c89b80b0d0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89b80b690 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c89b80b760
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89b80c4a0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89b80c570
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89af00470 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89af00570
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89af01310 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89af013e0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89af01e40 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c89af01f40
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89af02ce0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89af02de0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89bc90ad0 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c89bc90ba0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89bc918e0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89bc919b0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89bed1da0 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c89bed1e70
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89bed2c10 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89bed2ce0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89c113570 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c89c113640
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89c1143e0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89c1144b0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89c1154a0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89c115570
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89c116310 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89c1163e0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89c116e40 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c89c116f10
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89c11a0b0 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c89c11a180
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89c11a740 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c89c11a810
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89c11b5b0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89c11b680
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89c11c670 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c89c11c740
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89c11d4e0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c89c11d5b0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887931f0 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c8887894c0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88872e100 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887892d0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887abc80 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c888715e20
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88879a850 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c888715d00
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88879a5c0 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c888748940
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888789200 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888748880
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887893f0 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c88872e1d0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887984c0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c888752d60
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888715aa0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887895e0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887896a0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888734390
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888734450 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c8887980a0
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888798160 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c88875d040
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88875d100 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c88892c1f0
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887b6820 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887b68f0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887568b0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888756980
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888752ee0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c888752fb0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c896e23460 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c896e23530
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888734910 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887349e0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887b5ef0 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c8887b5fc0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88871c870 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c88871c940
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888718450 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c888718520
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888718640 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888718710
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887187d0 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c88870c810
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88870c930 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c88870ca00
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88870cd70 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c88870ce40
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888763b90 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888763c60
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887641c0 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c8887bf890
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887bf950 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c8887bfa20
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888725010 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c8887250e0
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888725200 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887c9850
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887c9bc0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887c9c90
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887c9db0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887c9e80
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887c9f40 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c88874ec30
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88888e120 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c88888e1f0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888733b10 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c888733be0
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888733d00 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c888733dd0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888734140 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c888734210
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887aca90 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887acb60
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887ad0b0 to: 0x55c888721160
[compiler:info]   Source: 2359296 bytes with name  0x55c8887ad180
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887a1070 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887a1140
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887a1200 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887a12d0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88870e760 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c88870e830
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88879fb20 to: 0x55c888721160
[compiler:info]   Source: 9437184 bytes with name  0x55c88870eb40
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88870ec00 to: 0x55c8887ce020
[compiler:info]   Source: 12288 bytes with name  0x55c888779eb0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 3072} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88877a410 to: 0x55c8887ce020
[compiler:info]   Source: 9437184 bytes with name  0x55c88877a4e0
[compiler:info]   Dest: 9437184 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88877a600 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888723150
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887234c0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8888755d0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887235f0 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c8887236c0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887a6740 to: 0x55c8887ce020
[compiler:info]   Source: 2359296 bytes with name  0x55c8887a6810
[compiler:info]   Dest: 2359296 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888713ea0 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c8887577b0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888757b20 to: 0x55c888721160
[compiler:info]   Source: 3072 bytes with name  0x55c888757bf0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888757d10 to: 0x55c8887ce020
[compiler:info]   Source: 3072 bytes with name  0x55c888757de0
[compiler:info]   Dest: 3072 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {30522, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88877c0a0 to: 0x55c8887ce020
[compiler:info]   Source: 93763584 bytes with name  0x55c8887c2900
[compiler:info]   Dest: 93763584 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c888721160 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {30522} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888795580 to: 0x55c888721160
[compiler:info]   Source: 122088 bytes with name  0x55c888795650
[compiler:info]   Dest: 122088 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {30522} ...
[compiler:info] [torch_rdu] Copy from: 0x55c888795580 to: 0x55c888721160
[compiler:info]   Source: 122088 bytes with name  0x55c888795650
[compiler:info]   Dest: 122088 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&0 0x55c888721160 1 has_backanno: 0
[compiler:info] RDU shallow_copy_and_detach &0 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] slice...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8948c1c80 to: 0x55c8887ce020
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888728830 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16}
[compiler:info]   strides: {16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] unsqueeze ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8948c1e90 1 has_backanno: 0
[compiler:info] [torch_rdu] unsqueeze_ ...
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 1, 16}
[compiler:info]   strides: {16, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] unsqueeze ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8948c2220 1 has_backanno: 0
[compiler:info] [torch_rdu] unsqueeze_ ...
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 1, 1, 16}
[compiler:info]   strides: {16, 16, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] slice...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8948c1c80 to: 0x55c8948c2220
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8948c1e90 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 1, 1, 16}
[compiler:info]   strides: {16, 16, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 1, 1, 16} ...
[compiler:info] platform name...
[compiler:info] DataScale SN10-8
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] JIT::construct 8775762 ns
[JITPerf] &JIT::construct 8784343 ns
[compiler:info] [torch_rdu] Copy from: 0x55c8948c2c80 to: 0x55c8948c1e90
[compiler:info]   Source: 128 bytes with name  0x55c8948c26e0
[compiler:info]   Dest: 64 bytes with name  0x0
[compiler:info] [torch_rdu] sub ... 
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 1, 1, 16} ...
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] Copy from: 0x55c8948c1e90 to: 0x55c8948c2c80
[compiler:info]   Source: 64 bytes with name  0x0
[compiler:info]   Dest: 128 bytes with name  0x0
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 190 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c894f61970 to: 0x55c8887ce020
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8887ce020 to: 0x55c8949a4420
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 1, 1, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8948c2c80 to: 0x55c8949a4420
[compiler:info]   Source: 128 bytes with name  0x0
[compiler:info]   Dest: 64 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 403511 ns
[JITPerf] &JIT::construct 51 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] update_ir() 1470 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Sub"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x1x1x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "sub_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %2 = "air.Collect"(%0, %1) {kConfigured = true, kLambda = @sub_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x1x1x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 599443 ns
[JITPerf] apply_binary() 607863 ns
[compiler:info] [torch_rdu] mul ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 1, 1, 16} ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] force_evaluate::RDUTensorImpl 131 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 19360 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Sub"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x1x1x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "sub_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %2 = "air.Collect"(%0, %1) {kConfigured = true, kLambda = @sub_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x1x1x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x1x1x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 59150 ns
[compiler:info] ====== HASH INFO: bf05703c91d1b46a25428c50e23107bdf94caeaab71b44e49c31dd08ced749a5
[mac:warn] Got a single node section and MAC may ignore capacity check for it
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC050_AIRResourceAwarePeepholeOptIter converged after 1 iteration(s)
MAC055_AIRToTLIRLoweringNestedLoopsIter converged after 0 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
[info    ] [PLASMA] Launching plasma compilation! See log file: /scratch/jobs/38941840/jit_out/jit_out.plasma_compile.log
[info    ] Total per-section passes: 77
[info    ] Compiling graph for section 0
[mac:info] Building nameddims for graph jit_out
[mac:info] Analyze tiling for graph: jit_out
[mac:info] Mapping for graph jit_out
[mac:info] Set up stage ID and metapipe ID for section 0
[mac:info] MAC decided on the following section cuts for graph jit_out
[mac:info] Amortized resources overall: 1.000000e+00 PCUs, 9.000000e+00 PMUs, projected latency: 3.500161e-05 s, FLOPS: 4.571218e-07 T/s, DDR_BW: 1.756127e-03 GB/s
[mac:info] Lowering to TLIR succeeded.
[rail:info] Logs are generated in /scratch/jobs/38941840/jit_out//rail_gen//rail_compile_logs for partition_0_0_.
[rail:info] Compilation succeeded for partition_0_0_. Elapsed time:  87ms
[info    ] [PASS] Running PRISM000_PreProcessPass0_0
[info    ] Generated utilization report file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] [PASS] Running PRISM001_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM002_PlasmaIRPass0_0
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/sections_0_0
[compiler:info] Plasma compile succeeded.
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/schedule_0_0
[compiler:info] Plasma compile succeeded.
[info    ] [PASS] Running PRISM003_PlasmaIRSymbolAllocExportPass0_0
[info    ] [PASS] Running PRISM004_LegalizeUtilizationPass0_0
[info    ] [PASS] Running PRISM005_LegalizeSocketConnectionsPass0_0
[info    ] [PASS] Running PRISM006_LayoutConsolidationPass0_0
[info    ] [PASS] Running PRISM007_PmuLoadStoreSetupPass0_0
[info    ] [PASS] Running PRISM008_FinalizeIoPass0_0
[info    ] [PASS] Running PRISM009_CollectConnectionPass0_0
[info    ] [PASS] Running PRISM010_NetworkValidationPass0_0
[info    ] [PASS] Running PRISM011_DramAnalyticalReportPass0_0
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[info    ] Logging dram analysis report to /scratch/jobs/38941840/jit_out/prism_gen/reports/dram_analysis.json
[info    ] [PASS] Running PRISM012_AsmIRGenPNRConnectPass0_0
[info    ] [PASS] Running PRISM013_PrintLoweringPass0_0
[info    ] [PASS] Running PRISM014_AsmIRResourceAllocationPass0_0
[info    ] [PASS] Running PRISM015_PmuExprCompilePass0_0
[info    ] [PASS] Running PRISM016_GroupAnnotationPass0_0
[info    ] [PASS] Running PRISM017_TemplateDataflowGraphPass0_0
[info    ] [PASS] Running PRISM018_BoxUtilizationLegalizerPass0_0
[info    ] [PASS] Running PRISM019_LegalizePartitionAssignmentPass0_0
[info    ] [PASS] Running PRISM020_ConditionValidationPass0_0
[info    ] [PASS] Running PRISM021_AssignMetapipeStagePass0_0
[info    ] [PASS] Running PRISM022_AnalyticalModelFileGenPass0_0
[info    ] [PASS] Running PRISM023_PlasmaIRProgramStatePass0_0
[info    ] [PASS] Running PRISM024_MetapipeStageLatencyPass0_0
[info    ] Generated metapipe stage graph dot file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[info    ] [PASS] Running PRISM025_MetapipeStageGraphPass0_0
[info    ] [PASS] Running PRISM026_BandwidthAnnotationPass0_0
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] 

============ Bandwidth QA Report ============

Total edges: 9
Bandwidth starving edges before pass (src/sink < 0.8): 7 (77.7778%)
Bandwidth back pressure edges before pass (src/sink > 1.2): 2 (22.2222%)
Missing source bandwidth after pass: 0 (0%)
Missing sink bandwidth after pass: 0 (0%)

[info    ] [PASS] Running PRISM027_FilePlacementPass_GenEdgeId0_0
[info    ] [PASS] Running PRISM028_FloorplanPass0_0
[info    ] Floorplanning log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM028_FloorplanPass0_0.FP.0.0.log
[info    ] [PASS] Running PRISM029_VagAllocPass0_0
[info    ] [PASS] Running PRISM030_AsmIRPrePortAllocAsmTransformPass0_0
[info    ] [PASS MANAGER] Start PnR
[info    ] [PASS] Running PRISM031_PlacerPass0_0
[info    ] Prism config stored in: /scratch/jobs/38941840/jit_out/jit_out.configs
[info    ] Launching placement flow with (set) 1 threads
[info    ] BoxPlanner log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.BP.0.0.log
[info    ] WavefrontPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.DFG.0.0.log
[info    ] SAPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.SA.0.0.log
[info    ] Placement runtime:	partition{0, 0}: 0s	
[info    ] [PASS] Running PRISM032_PmuTwinPass0_0
[info    ] [PASS] Running PRISM033_TemplateTileDoneLoweringPass0_0
[info    ] [PASS] Running PRISM034_VagConfigurePass0_0
[info    ] [PASS] Running PRISM035_VagAllocReportPass0_0
[info    ] [PASS] Running PRISM036_DataPortAllocatorPass0_0
[info    ] [PASS] Running PRISM037_AgcuOrchestrationPass0_0
[info    ] [PASS] Running PRISM038_RampControlPass0_0
[info    ] [PASS] Running PRISM039_E2EInjectionPass0_0
[info    ] [PASS] Running PRISM040_InstrumentationPreprocessPass0_0
[info    ] [PASS] Running PRISM041_BarrierLoweringPass0_0
[info    ] [PASS] Running PRISM042_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM043_ControlBandwidthAnnotationPass0_0
[info    ] [PASS] Running PRISM044_InstrumentationCounterPass0_0
[info    ] [PASS] Running PRISM045_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM046_ControlConnectorPass0_0
[info    ] [PASS] Running PRISM047_DataConnectorPass0_0
[info    ] [PASS MANAGER] Done with PnR
[info    ] [PASS] Running PRISM048_BandwidthReportPass0_0
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.VECTOR.0.0.log
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.SCALAR.0.0.log
[info    ] [PASS] Running PRISM049_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM050_ControlConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM051_DataConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM052_FinalizePass0_0
[info    ] [PASS] Running PRISM053_FinalizeSnapshotPass0_0
[info    ] [PASS] Running PRISM054_VagExprCompilePass0_0
[info    ] [PASS] Running PRISM055_WatermarkPass0_0
[info    ] [PASS] Running PRISM056_OrphanUnitPass0_0
[info    ] [PASS] Running PRISM057_BoxFileGenPass0_0
[info    ] [PASS] Running PRISM058_P2pPass0_0
[info    ] [PASS] Running PRISM059_AsmIRPostPortAllocAsmTransformPass0_0
[info    ] [PASS] Running PRISM060_DataSocketAnnotationPass0_0
[info    ] [PASS] Running PRISM061_AuroraFileGenPass0_0
[info    ] [PASS] Running PRISM062_AsmLegalizerPass0_0
[info    ] [PASS] Running PRISM063_ExpectedPacketCountAnnotationPass0_0
[info    ] [PASS] Running PRISM064_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM065_AsmPlasticineCodegen0_0
[info    ] [PASS] Running PRISM066_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM067_PrintAsmPass_post_codegen0_0
[info    ] [PASS] Running PRISM068_PrintAsmPass_asm_ir_report0_0
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/RouteReportPass.cpp:34] Old report is not removed: /scratch/jobs/38941840/jit_out/jit_out_0_0.routes_report.txt
[info    ] [PASS] Running PRISM069_RouteReportPass0_0
[info    ] [PASS] Running PRISM070_AgcuFileGenPass0_0
[info    ] [PASS] Running PRISM071_CheckerPass0_0
[info    ] [PASS] Running PRISM072_ArgInsPass0_0
[info    ] [PASS] Running PRISM073_BitfileGenPass0_0
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin created
[info    ] [PASS] Running PRISM074_UtilizationFileGenPass0_0
[info    ] [PASS] Running PRISM075_PmuStatsPass0_0
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_info.csv
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_ctx_info.csv
[info    ] [PASS] Running PRISM076_PostProcessSectionsPass0_0
[info    ] Freeing memory for compilation phase 0__0
[info    ] Incremental Passes for Section(s) 0__0 Completed.
[info    ] Incremental Passes Completed.
[info    ] [PASS] Running PRISM077_SymInitFunctionsPass
[info    ] [PASS] Running PRISM078_DataAllocPass
[info    ] [PASS] Running PRISM079_HostFifoPass
[info    ] [PASS] Running PRISM080_HostFunctionPass
[info    ] [PASS] Running PRISM081_DebugFileGenPass
[info    ] [PASS] Running PRISM082_PefGenPass
[info    ] symbol log file /scratch/jobs/38941840/jit_out/jit_out.symbol.log created
[info    ] PEF file /scratch/jobs/38941840/jit_out/jit_out.pef created
[info    ] PEF log file /scratch/jobs/38941840/jit_out/jit_out.pef.log created
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin loaded
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin.slam created
[info    ] [PASS] Running PRISM083_DatafileGenPass
[info    ] datafile /scratch/jobs/38941840/jit_out/jit_out.data created
[info    ] Data log file /scratch/jobs/38941840/jit_out/jit_out.data.log created
[info    ] PnR node feedback file created /scratch/jobs/38941840/jit_out/jit_out.node_feedback.json
[info    ] PnR partition feedback file created /scratch/jobs/38941840/jit_out/jit_out.partition_feedback.json
[info    ] Global Passes Completed.
[arc:info] Generated debug_cpp files placed in: /scratch/jobs/38941840/jit_out/imcg_cpp/arc_gen/
[arc:info] Generated files placed in: /scratch/jobs/38941840/jit_out/arc_gen/
[arc:info] Compilation succeeded.
[mac:info] Mac Compilation succeeded.
[compiler:info] copy pef /scratch/jobs/38941840/jit_out/jit_out.pef to /scratch/jobs/38941840/jit_out/jit_out.0.pef
[compiler:info] Successfully compiled pef at /scratch/jobs/38941840/jit_out/jit_out.pef
[JITPerf] force_evaluate::CompilePEF 395094361 ns
[JITPerf] force_evaluate::FilterInputs 17670 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 406460116 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c8948c2220 to: 0x55c8948c2c80
[compiler:info]   Source: 64 bytes with name  0x0
[compiler:info]   Dest: 128 bytes with name  0x0
[JITPerf] &JIT::construct 420 ns
[JITPerf] get_empty() 300 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 51 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a639d680 to: 0x55c89500a6d0
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 1, 1, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8948c2c80 to: 0x55c8887ce020
[compiler:info]   Source: 128 bytes with name  0x0
[compiler:info]   Dest: 64 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ce020 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89500a6d0 to: 0x55c8887ce020
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ce020 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 15533695 ns
[JITPerf] &JIT::construct 150 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] &JIT::construct 71 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_rdu_tensor_impl() 230 ns
[JITPerf] update_ir() 2750 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1xbf16>
      %2 = "air.Mul"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      "air.lambda.output"(%2) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 5 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "mul_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Collect"(%0, %1) {kConfigured = true, kLambda = @mul_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 16123127 ns
[JITPerf] apply_binary() 16707761 ns
[compiler:info] [torch_rdu] slice...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a639d680 to: 0x55c8948c1e90
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c896e210d0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 512}
[compiler:info]   strides: {512, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] slice...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a639d680 to: 0x55c8948c2c80
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8948c2220 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16}
[compiler:info]   strides: {512, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 170 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a639d680 to: 0x55c8948c2220
[compiler:info]   Source: 128 bytes with name  0x0
[compiler:info]   Dest: 128 bytes with name  0x0
[compiler:info] [torch_rdu_cpu_fallback] index_select ...
[JITPerf] &JIT::construct 240 ns
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {16, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a639d680 to: 0x55c8887ce020
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ce020 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 140 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a639d680 to: 0x55c8948c2220
[compiler:info]   Source: 4096 bytes with name  0x0
[compiler:info]   Dest: 128 bytes with name  0x0
[compiler:info] [torch_rdu_cpu_fallback] index_select ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {16, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a639d680 to: 0x55c8887ce020
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ce020 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 100 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a639d680 to: 0x55c8948c2220
[compiler:info]   Source: 128 bytes with name  0x0
[compiler:info]   Dest: 128 bytes with name  0x0
[compiler:info] [torch_rdu_cpu_fallback] index_select ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {16, 768} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a639d680 to: 0x55c8887ce020
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ce020 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 91 ns
[JITPerf] get_empty() 240 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f0f760 1 has_backanno: 0
[JITPerf] &JIT::construct 180 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a618cbc0 1 has_backanno: 0
[JITPerf] &JIT::construct 100 ns
[JITPerf] extract_inputs_helper() 1055675 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_rdu_tensor_impl() 229 ns
[JITPerf] update_ir() 2240 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %1 = "air.Reshape"(%0) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %3 = "air.Reshape"(%2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %4 = "air.Collect"(%1, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 1376436 ns
[JITPerf] apply_binary() 1385996 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 71 ns
[JITPerf] get_empty() 189 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 80 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6168cb0 1 has_backanno: 0
[JITPerf] &JIT::construct 80 ns
[JITPerf] extract_inputs_helper() 57710 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 150 ns
[JITPerf] update_ir() 1670 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %1 = "air.Reshape"(%0) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %3 = "air.Reshape"(%2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %4 = "air.Collect"(%1, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %5 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %6 = "air.Reshape"(%5) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %7 = "air.Collect"(%4, %6) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 360811 ns
[JITPerf] apply_binary() 371342 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 120 ns
[JITPerf] get_empty() 300 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887f1120 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887f8ab0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 82270 ns
[JITPerf] &JIT::construct 90 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 149 ns
[JITPerf] update_ir() 1700 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %1 = "air.Reshape"(%0) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %3 = "air.Reshape"(%2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %4 = "air.Collect"(%1, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %5 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %6 = "air.Reshape"(%5) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %7 = "air.Collect"(%4, %6) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %10 = "air.Reshape"(%8) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %11 = "air.Reshape"(%9) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %12 = "air.LayerNorm"(%7, %10, %11) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 346401 ns
[JITPerf] apply_ternary() 356962 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887eb530 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8948c2220 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 180 ns
[JITPerf] get_empty() 200 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6168cb0 1 has_backanno: 0
[JITPerf] &JIT::construct 90 ns
[JITPerf] extract_inputs_helper() 99351 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 130 ns
[JITPerf] update_ir() 1590 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %1 = "air.Reshape"(%0) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %3 = "air.Reshape"(%2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %4 = "air.Collect"(%1, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %5 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %6 = "air.Reshape"(%5) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %7 = "air.Collect"(%4, %6) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %10 = "air.Reshape"(%8) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %11 = "air.Reshape"(%9) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %12 = "air.LayerNorm"(%7, %10, %11) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %14 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %15 = "air.Permute"(%14) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %16 = "air.Matmul"(%13, %15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 350712 ns
[JITPerf] apply_binary() 360592 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f0f760 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ed4c0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 62801 ns
[JITPerf] &JIT::construct 69 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 160 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] update_ir() 16010 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %1 = "air.Reshape"(%0) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %3 = "air.Reshape"(%2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %4 = "air.Collect"(%1, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %5 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %6 = "air.Reshape"(%5) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %7 = "air.Collect"(%4, %6) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %10 = "air.Reshape"(%8) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %11 = "air.Reshape"(%9) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %12 = "air.LayerNorm"(%7, %10, %11) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %14 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %15 = "air.Permute"(%14) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %16 = "air.Matmul"(%13, %15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %17 = "air.Reshape"(%16) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %18 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %19 = "air.Collect"(%17, %18) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %20 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 483372 ns
[JITPerf] apply_binary_in_place() 486323 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ee390 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8948c2220 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_empty() 180 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 70 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894fdacf0 1 has_backanno: 0
[JITPerf] &JIT::construct 60 ns
[JITPerf] extract_inputs_helper() 77131 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 120 ns
[JITPerf] update_ir() 1450 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %1 = "air.Reshape"(%0) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %3 = "air.Reshape"(%2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %4 = "air.Collect"(%1, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %5 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %6 = "air.Reshape"(%5) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %7 = "air.Collect"(%4, %6) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %10 = "air.Reshape"(%8) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %11 = "air.Reshape"(%9) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %12 = "air.LayerNorm"(%7, %10, %11) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %14 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %15 = "air.Permute"(%14) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %16 = "air.Matmul"(%13, %15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %17 = "air.Reshape"(%16) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %18 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %19 = "air.Collect"(%17, %18) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %20 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %21 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %22 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %23 = "air.Permute"(%22) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %24 = "air.Matmul"(%21, %23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 370142 ns
[JITPerf] apply_binary() 379532 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c883bb59f0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 140 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888809670 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 57270 ns
[JITPerf] &JIT::construct 71 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_rdu_tensor_impl() 130 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] update_ir() 13800 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %1 = "air.Reshape"(%0) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %3 = "air.Reshape"(%2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %4 = "air.Collect"(%1, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %5 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %6 = "air.Reshape"(%5) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %7 = "air.Collect"(%4, %6) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %10 = "air.Reshape"(%8) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %11 = "air.Reshape"(%9) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %12 = "air.LayerNorm"(%7, %10, %11) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %14 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %15 = "air.Permute"(%14) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %16 = "air.Matmul"(%13, %15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %17 = "air.Reshape"(%16) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %18 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %19 = "air.Collect"(%17, %18) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %20 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %21 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %22 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %23 = "air.Permute"(%22) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %24 = "air.Matmul"(%21, %23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Reshape"(%24) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %26 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %27 = "air.Collect"(%25, %26) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 547343 ns
[JITPerf] apply_binary_in_place() 550203 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888809d00 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8948c2220 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_empty() 200 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 71 ns
[JITPerf] &JIT::construct 69 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88870cf60 1 has_backanno: 0
[JITPerf] &JIT::construct 80 ns
[JITPerf] extract_inputs_helper() 80281 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 140 ns
[JITPerf] update_ir() 1440 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %1 = "air.Reshape"(%0) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %3 = "air.Reshape"(%2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %4 = "air.Collect"(%1, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %5 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %6 = "air.Reshape"(%5) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %7 = "air.Collect"(%4, %6) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %10 = "air.Reshape"(%8) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %11 = "air.Reshape"(%9) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %12 = "air.LayerNorm"(%7, %10, %11) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %14 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %15 = "air.Permute"(%14) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %16 = "air.Matmul"(%13, %15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %17 = "air.Reshape"(%16) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %18 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %19 = "air.Collect"(%17, %18) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %20 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %21 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %22 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %23 = "air.Permute"(%22) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %24 = "air.Matmul"(%21, %23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Reshape"(%24) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %26 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %27 = "air.Collect"(%25, %26) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %29 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %30 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %31 = "air.Permute"(%30) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %32 = "air.Matmul"(%29, %31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 425262 ns
[JITPerf] apply_binary() 435333 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c883b0dcf0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 50 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888813cf0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 41820 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 120 ns
[JITPerf] &JIT::construct 51 ns
[JITPerf] update_ir() 10340 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %1 = "air.Reshape"(%0) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %3 = "air.Reshape"(%2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %4 = "air.Collect"(%1, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %5 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %6 = "air.Reshape"(%5) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %7 = "air.Collect"(%4, %6) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %10 = "air.Reshape"(%8) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %11 = "air.Reshape"(%9) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %12 = "air.LayerNorm"(%7, %10, %11) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %14 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %15 = "air.Permute"(%14) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %16 = "air.Matmul"(%13, %15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %17 = "air.Reshape"(%16) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %18 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %19 = "air.Collect"(%17, %18) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %20 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %21 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %22 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %23 = "air.Permute"(%22) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %24 = "air.Matmul"(%21, %23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Reshape"(%24) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %26 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %27 = "air.Collect"(%25, %26) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %29 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %30 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %31 = "air.Permute"(%30) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %32 = "air.Matmul"(%29, %31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %33 = "air.Reshape"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %34 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %35 = "air.Collect"(%33, %34) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %36 = "air.Reshape"(%35) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 428042 ns
[JITPerf] apply_binary_in_place() 430122 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888747580 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f1fbc0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8863aff70 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f1fbc0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a61c9980 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f1fbc0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894fa4120 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894fd8e00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 100 ns
[JITPerf] force_evaluate::RDUTensorImpl 289 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 5
[JITPerf] force_evaluate::PrepareIR 112291 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %1 = "air.Reshape"(%0) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %3 = "air.Reshape"(%2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %4 = "air.Collect"(%1, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %5 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<16x768xbf16>
    %6 = "air.Reshape"(%5) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %7 = "air.Collect"(%4, %6) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %10 = "air.Reshape"(%8) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %11 = "air.Reshape"(%9) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %12 = "air.LayerNorm"(%7, %10, %11) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %14 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %15 = "air.Permute"(%14) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %16 = "air.Matmul"(%13, %15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %17 = "air.Reshape"(%16) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %18 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %19 = "air.Collect"(%17, %18) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %20 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %21 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %22 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %23 = "air.Permute"(%22) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %24 = "air.Matmul"(%21, %23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Reshape"(%24) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %26 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %27 = "air.Collect"(%25, %26) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %29 = "air.Reshape"(%12) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %30 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %31 = "air.Permute"(%30) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %32 = "air.Matmul"(%29, %31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %33 = "air.Reshape"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %34 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %35 = "air.Collect"(%33, %34) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %36 = "air.Reshape"(%35) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%7) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%12) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%20) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%28) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%36) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 319371 ns
[compiler:info] ====== HASH INFO: eb42108687042ee3b1dedc3bb26925585c718fbcb77c811eef595d8857bc4e7b
[mac:warn] name collision detected for input_0
[mac:warn] name collision detected for input_1
[mac:warn] name collision detected for air_Collect_0
[mac:warn] name collision detected for air_Collect_0_unary
[mac:warn] name collision detected for air_Collect_0_binary1
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for air_Output_0
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC129_AIRResourceAwarePeepholeOptIter converged after 1 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC134_AIRToTLIRLoweringNestedLoopsIter converged after 1 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
[info    ] Total per-section passes: 77
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_tln_traffic_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.node_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pmu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pcu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.template_names.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.data
[info    ] Compiling graph for section 0
[mac:info] Building nameddims for graph jit_out
[mac:info] Analyze tiling for graph: jit_out
[mac:info] Mapping for graph jit_out
[mac:info] Set up stage ID and metapipe ID for section 0
[mac:info] MAC decided on the following section cuts for graph jit_out
[mac:info] Amortized resources overall: 3.100000e+01 PCUs, 1.410000e+02 PMUs, projected latency: 6.986256e-05 s, FLOPS: 8.141864e-01 T/s, DDR_BW: 4.990021e+01 GB/s
[mac:info] Lowering to TLIR succeeded.
[rail:info] Logs are generated in /scratch/jobs/38941840/jit_out//rail_gen//rail_compile_logs for partition_0_0_.
[rail:info] Compilation succeeded for partition_0_0_. Elapsed time:  673ms
[info    ] [PASS] Running PRISM000_PreProcessPass0_0
[info    ] Generated utilization report file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] [PASS] Running PRISM001_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM002_PlasmaIRPass0_0
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/sections_0_0
[compiler:info] Plasma compile succeeded.
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/schedule_0_0
[compiler:info] Plasma compile succeeded.
[info    ] [PASS] Running PRISM003_PlasmaIRSymbolAllocExportPass0_0
[info    ] [PASS] Running PRISM004_LegalizeUtilizationPass0_0
[info    ] [PASS] Running PRISM005_LegalizeSocketConnectionsPass0_0
[info    ] [PASS] Running PRISM006_LayoutConsolidationPass0_0
[info    ] [PASS] Running PRISM007_PmuLoadStoreSetupPass0_0
[info    ] [PASS] Running PRISM008_FinalizeIoPass0_0
[info    ] [PASS] Running PRISM009_CollectConnectionPass0_0
[info    ] [PASS] Running PRISM010_NetworkValidationPass0_0
[info    ] [PASS] Running PRISM011_DramAnalyticalReportPass0_0
[info    ] Logging dram analysis report to /scratch/jobs/38941840/jit_out/prism_gen/reports/dram_analysis.json
[info    ] [PASS] Running PRISM012_AsmIRGenPNRConnectPass0_0
[info    ] [PASS] Running PRISM013_PrintLoweringPass0_0
[info    ] [PASS] Running PRISM014_AsmIRResourceAllocationPass0_0
[info    ] [PASS] Running PRISM015_PmuExprCompilePass0_0
[info    ] [PASS] Running PRISM016_GroupAnnotationPass0_0
[info    ] [PASS] Running PRISM017_TemplateDataflowGraphPass0_0
[info    ] [PASS] Running PRISM018_BoxUtilizationLegalizerPass0_0
[info    ] [PASS] Running PRISM019_LegalizePartitionAssignmentPass0_0
[info    ] [PASS] Running PRISM020_ConditionValidationPass0_0
[info    ] [PASS] Running PRISM021_AssignMetapipeStagePass0_0
[info    ] [PASS] Running PRISM022_AnalyticalModelFileGenPass0_0
[info    ] [PASS] Running PRISM023_PlasmaIRProgramStatePass0_0
[info    ] [PASS] Running PRISM024_MetapipeStageLatencyPass0_0
[info    ] Generated metapipe stage graph dot file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[info    ] [PASS] Running PRISM025_MetapipeStageGraphPass0_0
[info    ] [PASS] Running PRISM026_BandwidthAnnotationPass0_0
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] 

============ Bandwidth QA Report ============

Total edges: 137
Bandwidth starving edges before pass (src/sink < 0.8): 34 (24.8175%)
Bandwidth back pressure edges before pass (src/sink > 1.2): 14 (10.219%)
Missing source bandwidth after pass: 0 (0%)
Missing sink bandwidth after pass: 0 (0%)

[info    ] [PASS] Running PRISM027_FilePlacementPass_GenEdgeId0_0
[info    ] [PASS] Running PRISM028_FloorplanPass0_0
[info    ] Floorplanning log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM028_FloorplanPass0_0.FP.0.0.log
[info    ] [PASS] Running PRISM029_VagAllocPass0_0
[info    ] [PASS] Running PRISM030_AsmIRPrePortAllocAsmTransformPass0_0
[info    ] [PASS MANAGER] Start PnR
[info    ] [PASS] Running PRISM031_PlacerPass0_0
[info    ] Prism config stored in: /scratch/jobs/38941840/jit_out/jit_out.configs
[info    ] Launching placement flow with (set) 1 threads
[info    ] BoxPlanner log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.BP.0.0.log
[info    ] WavefrontPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.DFG.0.0.log
[info    ] SAPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.SA.0.0.log
[info    ] Placement runtime:	partition{0, 0}: 0s	
[info    ] [PASS] Running PRISM032_PmuTwinPass0_0
[info    ] [PASS] Running PRISM033_TemplateTileDoneLoweringPass0_0
[info    ] [PASS] Running PRISM034_VagConfigurePass0_0
[info    ] [PASS] Running PRISM035_VagAllocReportPass0_0
[info    ] [PASS] Running PRISM036_DataPortAllocatorPass0_0
[info    ] [PASS] Running PRISM037_AgcuOrchestrationPass0_0
[info    ] [PASS] Running PRISM038_RampControlPass0_0
[info    ] [PASS] Running PRISM039_E2EInjectionPass0_0
[info    ] [PASS] Running PRISM040_InstrumentationPreprocessPass0_0
[info    ] [PASS] Running PRISM041_BarrierLoweringPass0_0
[info    ] [PASS] Running PRISM042_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM043_ControlBandwidthAnnotationPass0_0
[info    ] [PASS] Running PRISM044_InstrumentationCounterPass0_0
[info    ] [PASS] Running PRISM045_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM046_ControlConnectorPass0_0
[info    ] [PASS] Running PRISM047_DataConnectorPass0_0
[info    ] [PASS MANAGER] Done with PnR
[info    ] [PASS] Running PRISM048_BandwidthReportPass0_0
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.VECTOR.0.0.log
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.SCALAR.0.0.log
[info    ] [PASS] Running PRISM049_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM050_ControlConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM051_DataConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM052_FinalizePass0_0
[info    ] [PASS] Running PRISM053_FinalizeSnapshotPass0_0
[info    ] [PASS] Running PRISM054_VagExprCompilePass0_0
[info    ] [PASS] Running PRISM055_WatermarkPass0_0
[info    ] [PASS] Running PRISM056_OrphanUnitPass0_0
[info    ] [PASS] Running PRISM057_BoxFileGenPass0_0
[info    ] [PASS] Running PRISM058_P2pPass0_0
[info    ] [PASS] Running PRISM059_AsmIRPostPortAllocAsmTransformPass0_0
[info    ] [PASS] Running PRISM060_DataSocketAnnotationPass0_0
[info    ] [PASS] Running PRISM061_AuroraFileGenPass0_0
[info    ] [PASS] Running PRISM062_AsmLegalizerPass0_0
[info    ] [PASS] Running PRISM063_ExpectedPacketCountAnnotationPass0_0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_0_gemm_0_0_0_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_0_gemm_0_0_1_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_0_gemm_1_0_0_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_0_gemm_1_0_1_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_1_gemm_0_0_0_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_1_gemm_0_0_1_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_1_gemm_1_0_0_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_1_gemm_1_0_1_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_2_gemm_0_0_0_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_2_gemm_0_0_1_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_2_gemm_1_0_0_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in air_Matmul_2_gemm_1_0_1_PCU ctx0
[info    ] [PASS] Running PRISM064_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM065_AsmPlasticineCodegen0_0
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6384] JitOut.partition_0_0_.rbuf1a_0_0_101_D_0_0 rd0_0 forcing early done for send insn: send CtrlPortOut(15) L0.early()  where asm would have chosen a late done for CH-1223
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6384] JitOut.partition_0_0_.rbuf1a_0_0_111_D_0_0 rd0_0 forcing early done for send insn: send CtrlPortOut(0) L0.early()  where asm would have chosen a late done for CH-1223
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6384] JitOut.partition_0_0_.rbuf1a_0_0_121_D_0_0 rd0_0 forcing early done for send insn: send CtrlPortOut(15) L0.early()  where asm would have chosen a late done for CH-1223
[info    ] [PASS] Running PRISM066_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM067_PrintAsmPass_post_codegen0_0
[info    ] [PASS] Running PRISM068_PrintAsmPass_asm_ir_report0_0
[info    ] [PASS] Running PRISM069_RouteReportPass0_0
[info    ] [PASS] Running PRISM070_AgcuFileGenPass0_0
[info    ] [PASS] Running PRISM071_CheckerPass0_0
[info    ] [PASS] Running PRISM072_ArgInsPass0_0
[info    ] [PASS] Running PRISM073_BitfileGenPass0_0
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin created
[info    ] [PASS] Running PRISM074_UtilizationFileGenPass0_0
[info    ] [PASS] Running PRISM075_PmuStatsPass0_0
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_info.csv
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_ctx_info.csv
[info    ] [PASS] Running PRISM076_PostProcessSectionsPass0_0
[info    ] Freeing memory for compilation phase 0__0
[info    ] Incremental Passes for Section(s) 0__0 Completed.
[info    ] Incremental Passes Completed.
[info    ] [PASS] Running PRISM077_SymInitFunctionsPass
[info    ] [PASS] Running PRISM078_DataAllocPass
[info    ] [PASS] Running PRISM079_HostFifoPass
[info    ] [PASS] Running PRISM080_HostFunctionPass
[info    ] [PASS] Running PRISM081_DebugFileGenPass
[info    ] [PASS] Running PRISM082_PefGenPass
[info    ] symbol log file /scratch/jobs/38941840/jit_out/jit_out.symbol.log created
[info    ] PEF file /scratch/jobs/38941840/jit_out/jit_out.pef created
[info    ] PEF log file /scratch/jobs/38941840/jit_out/jit_out.pef.log created
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin loaded
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin.slam created
[info    ] [PASS] Running PRISM083_DatafileGenPass
[info    ] datafile /scratch/jobs/38941840/jit_out/jit_out.data created
[info    ] Data log file /scratch/jobs/38941840/jit_out/jit_out.data.log created
[info    ] PnR node feedback file created /scratch/jobs/38941840/jit_out/jit_out.node_feedback.json
[info    ] PnR partition feedback file created /scratch/jobs/38941840/jit_out/jit_out.partition_feedback.json
[info    ] Global Passes Completed.
[arc:info] Generated debug_cpp files placed in: /scratch/jobs/38941840/jit_out/imcg_cpp/arc_gen/
[arc:info] Generated files placed in: /scratch/jobs/38941840/jit_out/arc_gen/
[arc:info] Compilation succeeded.
[mac:info] Mac Compilation succeeded.
[compiler:info] copy pef /scratch/jobs/38941840/jit_out/jit_out.pef to /scratch/jobs/38941840/jit_out/jit_out.1.pef
[compiler:info] Successfully compiled pef at /scratch/jobs/38941840/jit_out/jit_out.pef
[JITPerf] force_evaluate::CompilePEF 3614961907 ns
[JITPerf] force_evaluate::FilterInputs 696533 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 397576804 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7afb690 to: 0x55c8a7cc90a0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f1fbc0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 180 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7afb690 to: 0x55c89502ad10
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 41780 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7cc90a0 to: 0x55c8a6dbd060
[compiler:info]   Source: 49152 bytes with name  0x55c8a86f6e90
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89502ad10 to: 0x55c8a6dfb160
[compiler:info]   Source: 49152 bytes with name  0x55c8a7a4fc40
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 6503022 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 1640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 6595512 ns
[JITPerf] apply_binary() 6642302 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c895034c00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] force_evaluate::RDUTensorImpl 190 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 32140 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 83291 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[mac:warn] name collision detected for input_0
[mac:warn] name collision detected for input_1
[mac:warn] name collision detected for air_Matmul_0
[mac:warn] name collision detected for air_Output_0
[mac:warn] Got a single node section and MAC may ignore capacity check for it
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC215_AIRResourceAwarePeepholeOptIter converged after 1 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC220_AIRToTLIRLoweringNestedLoopsIter converged after 1 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
[info    ] Total per-section passes: 77
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_tln_traffic_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.node_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pmu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pcu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.template_names.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.data
[info    ] Compiling graph for section 0
[warning ] [../prism/src/plasma/templates/mlnodes/GBuffer.cpp:6876] gbuf2a_0_0_27 Head1(Neck0): WINDOW: Small window 16 must be used, may affect performance
[mac:info] Building nameddims for graph jit_out
[mac:info] Analyze tiling for graph: jit_out
[mac:info] Mapping for graph jit_out
[mac:info] Set up stage ID and metapipe ID for section 0
[mac:info] MAC decided on the following section cuts for graph jit_out
[mac:info] Amortized resources overall: 2.000000e+00 PCUs, 1.100000e+01 PMUs, projected latency: 3.722428e-05 s, FLOPS: 1.056343e-02 T/s, DDR_BW: 1.383463e+00 GB/s
[mac:info] Lowering to TLIR succeeded.
[rail:info] Logs are generated in /scratch/jobs/38941840/jit_out//rail_gen//rail_compile_logs for partition_0_0_.
[rail:info] Compilation succeeded for partition_0_0_. Elapsed time:  2ms
[info    ] [PASS] Running PRISM000_PreProcessPass0_0
[info    ] Generated utilization report file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] [PASS] Running PRISM001_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM002_PlasmaIRPass0_0
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/sections_0_0
[compiler:info] Plasma compile succeeded.
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/schedule_0_0
[compiler:info] Plasma compile succeeded.
[info    ] [PASS] Running PRISM003_PlasmaIRSymbolAllocExportPass0_0
[info    ] [PASS] Running PRISM004_LegalizeUtilizationPass0_0
[info    ] [PASS] Running PRISM005_LegalizeSocketConnectionsPass0_0
[info    ] [PASS] Running PRISM006_LayoutConsolidationPass0_0
[info    ] [PASS] Running PRISM007_PmuLoadStoreSetupPass0_0
[info    ] [PASS] Running PRISM008_FinalizeIoPass0_0
[info    ] [PASS] Running PRISM009_CollectConnectionPass0_0
[info    ] [PASS] Running PRISM010_NetworkValidationPass0_0
[info    ] [PASS] Running PRISM011_DramAnalyticalReportPass0_0
[info    ] Logging dram analysis report to /scratch/jobs/38941840/jit_out/prism_gen/reports/dram_analysis.json
[info    ] [PASS] Running PRISM012_AsmIRGenPNRConnectPass0_0
[info    ] [PASS] Running PRISM013_PrintLoweringPass0_0
[info    ] [PASS] Running PRISM014_AsmIRResourceAllocationPass0_0
[info    ] [PASS] Running PRISM015_PmuExprCompilePass0_0
[info    ] [PASS] Running PRISM016_GroupAnnotationPass0_0
[info    ] [PASS] Running PRISM017_TemplateDataflowGraphPass0_0
[info    ] [PASS] Running PRISM018_BoxUtilizationLegalizerPass0_0
[info    ] [PASS] Running PRISM019_LegalizePartitionAssignmentPass0_0
[info    ] [PASS] Running PRISM020_ConditionValidationPass0_0
[info    ] [PASS] Running PRISM021_AssignMetapipeStagePass0_0
[info    ] [PASS] Running PRISM022_AnalyticalModelFileGenPass0_0
[info    ] [PASS] Running PRISM023_PlasmaIRProgramStatePass0_0
[info    ] [PASS] Running PRISM024_MetapipeStageLatencyPass0_0
[info    ] Generated metapipe stage graph dot file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[info    ] [PASS] Running PRISM025_MetapipeStageGraphPass0_0
[info    ] [PASS] Running PRISM026_BandwidthAnnotationPass0_0
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] 

============ Bandwidth QA Report ============

Total edges: 16
Bandwidth starving edges before pass (src/sink < 0.8): 7 (43.75%)
Bandwidth back pressure edges before pass (src/sink > 1.2): 4 (25%)
Missing source bandwidth after pass: 0 (0%)
Missing sink bandwidth after pass: 0 (0%)

[info    ] [PASS] Running PRISM027_FilePlacementPass_GenEdgeId0_0
[info    ] [PASS] Running PRISM028_FloorplanPass0_0
[info    ] Floorplanning log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM028_FloorplanPass0_0.FP.0.0.log
[info    ] [PASS] Running PRISM029_VagAllocPass0_0
[info    ] [PASS] Running PRISM030_AsmIRPrePortAllocAsmTransformPass0_0
[info    ] [PASS MANAGER] Start PnR
[info    ] [PASS] Running PRISM031_PlacerPass0_0
[info    ] Prism config stored in: /scratch/jobs/38941840/jit_out/jit_out.configs
[info    ] Launching placement flow with (set) 1 threads
[info    ] BoxPlanner log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.BP.0.0.log
[info    ] WavefrontPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.DFG.0.0.log
[info    ] SAPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.SA.0.0.log
[info    ] Placement runtime:	partition{0, 0}: 0s	
[info    ] [PASS] Running PRISM032_PmuTwinPass0_0
[info    ] [PASS] Running PRISM033_TemplateTileDoneLoweringPass0_0
[info    ] [PASS] Running PRISM034_VagConfigurePass0_0
[info    ] [PASS] Running PRISM035_VagAllocReportPass0_0
[info    ] [PASS] Running PRISM036_DataPortAllocatorPass0_0
[info    ] [PASS] Running PRISM037_AgcuOrchestrationPass0_0
[info    ] [PASS] Running PRISM038_RampControlPass0_0
[info    ] [PASS] Running PRISM039_E2EInjectionPass0_0
[info    ] [PASS] Running PRISM040_InstrumentationPreprocessPass0_0
[info    ] [PASS] Running PRISM041_BarrierLoweringPass0_0
[info    ] [PASS] Running PRISM042_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM043_ControlBandwidthAnnotationPass0_0
[info    ] [PASS] Running PRISM044_InstrumentationCounterPass0_0
[info    ] [PASS] Running PRISM045_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM046_ControlConnectorPass0_0
[info    ] [PASS] Running PRISM047_DataConnectorPass0_0
[info    ] [PASS MANAGER] Done with PnR
[info    ] [PASS] Running PRISM048_BandwidthReportPass0_0
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.VECTOR.0.0.log
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.SCALAR.0.0.log
[info    ] [PASS] Running PRISM049_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM050_ControlConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM051_DataConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM052_FinalizePass0_0
[info    ] [PASS] Running PRISM053_FinalizeSnapshotPass0_0
[info    ] [PASS] Running PRISM054_VagExprCompilePass0_0
[info    ] [PASS] Running PRISM055_WatermarkPass0_0
[info    ] [PASS] Running PRISM056_OrphanUnitPass0_0
[info    ] [PASS] Running PRISM057_BoxFileGenPass0_0
[info    ] [PASS] Running PRISM058_P2pPass0_0
[info    ] [PASS] Running PRISM059_AsmIRPostPortAllocAsmTransformPass0_0
[info    ] [PASS] Running PRISM060_DataSocketAnnotationPass0_0
[info    ] [PASS] Running PRISM061_AuroraFileGenPass0_0
[info    ] [PASS] Running PRISM062_AsmLegalizerPass0_0
[info    ] [PASS] Running PRISM063_ExpectedPacketCountAnnotationPass0_0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in biggemm_0_0_26_gemm_0_0_0_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in biggemm_0_0_26_gemm_0_0_1_PCU ctx0
[info    ] [PASS] Running PRISM064_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM065_AsmPlasticineCodegen0_0
[info    ] [PASS] Running PRISM066_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM067_PrintAsmPass_post_codegen0_0
[info    ] [PASS] Running PRISM068_PrintAsmPass_asm_ir_report0_0
[info    ] [PASS] Running PRISM069_RouteReportPass0_0
[info    ] [PASS] Running PRISM070_AgcuFileGenPass0_0
[info    ] [PASS] Running PRISM071_CheckerPass0_0
[info    ] [PASS] Running PRISM072_ArgInsPass0_0
[info    ] [PASS] Running PRISM073_BitfileGenPass0_0
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin created
[info    ] [PASS] Running PRISM074_UtilizationFileGenPass0_0
[info    ] [PASS] Running PRISM075_PmuStatsPass0_0
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_info.csv
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_ctx_info.csv
[info    ] [PASS] Running PRISM076_PostProcessSectionsPass0_0
[info    ] Freeing memory for compilation phase 0__0
[info    ] Incremental Passes for Section(s) 0__0 Completed.
[info    ] Incremental Passes Completed.
[info    ] [PASS] Running PRISM077_SymInitFunctionsPass
[info    ] [PASS] Running PRISM078_DataAllocPass
[info    ] [PASS] Running PRISM079_HostFifoPass
[info    ] [PASS] Running PRISM080_HostFunctionPass
[info    ] [PASS] Running PRISM081_DebugFileGenPass
[info    ] [PASS] Running PRISM082_PefGenPass
[info    ] symbol log file /scratch/jobs/38941840/jit_out/jit_out.symbol.log created
[info    ] PEF file /scratch/jobs/38941840/jit_out/jit_out.pef created
[info    ] PEF log file /scratch/jobs/38941840/jit_out/jit_out.pef.log created
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin loaded
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin.slam created
[info    ] [PASS] Running PRISM083_DatafileGenPass
[info    ] datafile /scratch/jobs/38941840/jit_out/jit_out.data created
[info    ] Data log file /scratch/jobs/38941840/jit_out/jit_out.data.log created
[info    ] PnR node feedback file created /scratch/jobs/38941840/jit_out/jit_out.node_feedback.json
[info    ] PnR partition feedback file created /scratch/jobs/38941840/jit_out/jit_out.partition_feedback.json
[info    ] Global Passes Completed.
[arc:info] Generated debug_cpp files placed in: /scratch/jobs/38941840/jit_out/imcg_cpp/arc_gen/
[arc:info] Generated files placed in: /scratch/jobs/38941840/jit_out/arc_gen/
[arc:info] Compilation succeeded.
[mac:info] Mac Compilation succeeded.
[compiler:info] copy pef /scratch/jobs/38941840/jit_out/jit_out.pef to /scratch/jobs/38941840/jit_out/jit_out.2.pef
[compiler:info] Successfully compiled pef at /scratch/jobs/38941840/jit_out/jit_out.pef
[JITPerf] force_evaluate::CompilePEF 368334782 ns
[JITPerf] force_evaluate::FilterInputs 19940 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 370632383 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c89501d1e0 to: 0x55c8a5f1fbc0
[compiler:info]   Source: 12288 bytes with name  0x55c8a78c8560
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 210 ns
[JITPerf] get_empty() 460 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a585e170 to: 0x55c8a664ca40
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5f1fbc0 to: 0x55c89501a460
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89501a460 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a664ca40 to: 0x55c89501a460
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89501a460 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 8458181 ns
[JITPerf] &JIT::construct 120 ns
[JITPerf] get_rdu_tensor_impl() 200 ns
[JITPerf] update_ir() 2430 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 8622641 ns
[JITPerf] apply_binary() 8640141 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 170 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 71 ns
[compiler:info] Number of owners (pre): 2
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 3
[JITPerf] extract_inputs_helper() 103061 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 130 ns
[JITPerf] update_ir() 1760 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1xbf16>
      %2 = "air.Mul"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      "air.lambda.output"(%2) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 5 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "mul_lambda1_0", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %5 = "air.Collect"(%3, %4) {kConfigured = true, kLambda = @mul_lambda1_0, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
    %6 = "air.Collect"(%2, %5) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 430052 ns
[JITPerf] apply_binary() 439012 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 110 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] extract_inputs_helper() 1650 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] update_ir() 1250 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1xbf16>
      %2 = "air.Mul"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      "air.lambda.output"(%2) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 5 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "mul_lambda1_0", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %5 = "air.Collect"(%3, %4) {kConfigured = true, kLambda = @mul_lambda1_0, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
    %6 = "air.Collect"(%2, %5) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %7 = "air.Softmax"(%6) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 163381 ns
[JITPerf] apply_unary_out() 171511 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a78fbc70 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fbc70 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 80 ns
[JITPerf] force_evaluate::RDUTensorImpl 250 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 3
[JITPerf] force_evaluate::PrepareIR 56640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1xbf16>
      %2 = "air.Mul"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      "air.lambda.output"(%2) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 5 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "mul_lambda1_0", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %5 = "air.Collect"(%3, %4) {kConfigured = true, kLambda = @mul_lambda1_0, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
    %6 = "air.Collect"(%2, %5) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %7 = "air.Softmax"(%6) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x1x1x16xbf16>) -> ()
    "air.Output"(%7) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 144501 ns
[compiler:info] ====== HASH INFO: 3fb73ae6282003fae657400c024d92a68340fb8f58eda10bfd39f26552d32bed
[mac:warn] name collision detected for input_0
[mac:warn] name collision detected for input_1
[mac:warn] name collision detected for input_2
[mac:warn] name collision detected for input_3
[mac:warn] name collision detected for air_Collect_0
[mac:warn] name collision detected for air_Collect_0_unary
[mac:warn] name collision detected for air_Collect_0_binary1
[mac:warn] name collision detected for air_Collect_1
[mac:warn] name collision detected for air_Collect_1_unary
[mac:warn] name collision detected for air_Collect_1_binary1
[mac:warn] name collision detected for air_Output_0
[mac:warn] name collision detected for air_Output_1
[mac:warn] name collision detected for air_Output_2
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC301_AIRResourceAwarePeepholeOptIter converged after 1 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC306_AIRToTLIRLoweringNestedLoopsIter converged after 2 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
[info    ] Total per-section passes: 77
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_tln_traffic_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.node_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pmu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pcu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.template_names.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.data
[info    ] Compiling graph for section 0
[mac:info] Building nameddims for graph jit_out
[mac:info] Analyze tiling for graph: jit_out
[mac:info] Mapping for graph jit_out
[mac:info] Set up stage ID and metapipe ID for section 0
[mac:info] MAC decided on the following section cuts for graph jit_out
[mac:info] Amortized resources overall: 7.000000e+00 PCUs, 2.600000e+01 PMUs, projected latency: 3.708282e-05 s, FLOPS: 9.116891e-04 T/s, DDR_BW: 4.646213e-01 GB/s
[mac:info] Lowering to TLIR succeeded.
[rail:info] Logs are generated in /scratch/jobs/38941840/jit_out//rail_gen//rail_compile_logs for partition_0_0_.
[rail:info] Compilation succeeded for partition_0_0_. Elapsed time:  172ms
[info    ] [PASS] Running PRISM000_PreProcessPass0_0
[info    ] Generated utilization report file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] [PASS] Running PRISM001_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM002_PlasmaIRPass0_0
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/sections_0_0
[compiler:info] Plasma compile succeeded.
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/schedule_0_0
[compiler:info] Plasma compile succeeded.
[info    ] [PASS] Running PRISM003_PlasmaIRSymbolAllocExportPass0_0
[info    ] [PASS] Running PRISM004_LegalizeUtilizationPass0_0
[info    ] [PASS] Running PRISM005_LegalizeSocketConnectionsPass0_0
[info    ] [PASS] Running PRISM006_LayoutConsolidationPass0_0
[info    ] [PASS] Running PRISM007_PmuLoadStoreSetupPass0_0
[info    ] [PASS] Running PRISM008_FinalizeIoPass0_0
[info    ] [PASS] Running PRISM009_CollectConnectionPass0_0
[info    ] [PASS] Running PRISM010_NetworkValidationPass0_0
[info    ] [PASS] Running PRISM011_DramAnalyticalReportPass0_0
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[info    ] Logging dram analysis report to /scratch/jobs/38941840/jit_out/prism_gen/reports/dram_analysis.json
[info    ] [PASS] Running PRISM012_AsmIRGenPNRConnectPass0_0
[info    ] [PASS] Running PRISM013_PrintLoweringPass0_0
[info    ] [PASS] Running PRISM014_AsmIRResourceAllocationPass0_0
[info    ] [PASS] Running PRISM015_PmuExprCompilePass0_0
[info    ] [PASS] Running PRISM016_GroupAnnotationPass0_0
[info    ] [PASS] Running PRISM017_TemplateDataflowGraphPass0_0
[info    ] [PASS] Running PRISM018_BoxUtilizationLegalizerPass0_0
[info    ] [PASS] Running PRISM019_LegalizePartitionAssignmentPass0_0
[info    ] [PASS] Running PRISM020_ConditionValidationPass0_0
[info    ] [PASS] Running PRISM021_AssignMetapipeStagePass0_0
[info    ] [PASS] Running PRISM022_AnalyticalModelFileGenPass0_0
[info    ] [PASS] Running PRISM023_PlasmaIRProgramStatePass0_0
[info    ] [PASS] Running PRISM024_MetapipeStageLatencyPass0_0
[info    ] Generated metapipe stage graph dot file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/MetapipeStageLatencyPass.cpp:886] This graph contains 1 unique templates with missing analytical models! They are: MeanPB 
[info    ] [PASS] Running PRISM025_MetapipeStageGraphPass0_0
[info    ] [PASS] Running PRISM026_BandwidthAnnotationPass0_0
[warning ] [../prism/src/plasma/lib/Core/Traversal/Transform/BandwidthAnnotationPass.cpp:230] PMU data sink socket softmax_0_0_78_fwdprop_pinput_PMU PMU Context: WRITE, 0 @ (255, 255, 0, 0):<PMU_INFIFO.VECTOR_SW: 4> has computed bandwidth smaller than user annotated bandwidth:  computed ideal bandwidth = 0.842105, annotated ideal bandwidth = 1
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] 

============ Bandwidth QA Report ============

Total edges: 38
Bandwidth starving edges before pass (src/sink < 0.8): 17 (44.7368%)
Bandwidth back pressure edges before pass (src/sink > 1.2): 7 (18.4211%)
Missing source bandwidth after pass: 0 (0%)
Missing sink bandwidth after pass: 0 (0%)

[info    ] [PASS] Running PRISM027_FilePlacementPass_GenEdgeId0_0
[info    ] [PASS] Running PRISM028_FloorplanPass0_0
[info    ] Floorplanning log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM028_FloorplanPass0_0.FP.0.0.log
[info    ] [PASS] Running PRISM029_VagAllocPass0_0
[info    ] [PASS] Running PRISM030_AsmIRPrePortAllocAsmTransformPass0_0
[info    ] [PASS MANAGER] Start PnR
[info    ] [PASS] Running PRISM031_PlacerPass0_0
[info    ] Prism config stored in: /scratch/jobs/38941840/jit_out/jit_out.configs
[info    ] Launching placement flow with (set) 1 threads
[info    ] BoxPlanner log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.BP.0.0.log
[info    ] WavefrontPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.DFG.0.0.log
[info    ] SAPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.SA.0.0.log
[info    ] Placement runtime:	partition{0, 0}: 0s	
[info    ] [PASS] Running PRISM032_PmuTwinPass0_0
[info    ] [PASS] Running PRISM033_TemplateTileDoneLoweringPass0_0
[info    ] [PASS] Running PRISM034_VagConfigurePass0_0
[info    ] [PASS] Running PRISM035_VagAllocReportPass0_0
[info    ] [PASS] Running PRISM036_DataPortAllocatorPass0_0
[info    ] [PASS] Running PRISM037_AgcuOrchestrationPass0_0
[info    ] [PASS] Running PRISM038_RampControlPass0_0
[info    ] [PASS] Running PRISM039_E2EInjectionPass0_0
[info    ] [PASS] Running PRISM040_InstrumentationPreprocessPass0_0
[info    ] [PASS] Running PRISM041_BarrierLoweringPass0_0
[info    ] [PASS] Running PRISM042_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM043_ControlBandwidthAnnotationPass0_0
[info    ] [PASS] Running PRISM044_InstrumentationCounterPass0_0
[info    ] [PASS] Running PRISM045_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM046_ControlConnectorPass0_0
[info    ] [PASS] Running PRISM047_DataConnectorPass0_0
[info    ] [PASS MANAGER] Done with PnR
[info    ] [PASS] Running PRISM048_BandwidthReportPass0_0
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.VECTOR.0.0.log
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.SCALAR.0.0.log
[info    ] [PASS] Running PRISM049_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM050_ControlConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM051_DataConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM052_FinalizePass0_0
[info    ] [PASS] Running PRISM053_FinalizeSnapshotPass0_0
[info    ] [PASS] Running PRISM054_VagExprCompilePass0_0
[info    ] [PASS] Running PRISM055_WatermarkPass0_0
[info    ] [PASS] Running PRISM056_OrphanUnitPass0_0
[info    ] [PASS] Running PRISM057_BoxFileGenPass0_0
[info    ] [PASS] Running PRISM058_P2pPass0_0
[info    ] [PASS] Running PRISM059_AsmIRPostPortAllocAsmTransformPass0_0
[info    ] [PASS] Running PRISM060_DataSocketAnnotationPass0_0
[info    ] [PASS] Running PRISM061_AuroraFileGenPass0_0
[info    ] [PASS] Running PRISM062_AsmLegalizerPass0_0
[info    ] [PASS] Running PRISM063_ExpectedPacketCountAnnotationPass0_0
[info    ] [PASS] Running PRISM064_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM065_AsmPlasticineCodegen0_0
[info    ] [PASS] Running PRISM066_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM067_PrintAsmPass_post_codegen0_0
[info    ] [PASS] Running PRISM068_PrintAsmPass_asm_ir_report0_0
[info    ] [PASS] Running PRISM069_RouteReportPass0_0
[info    ] [PASS] Running PRISM070_AgcuFileGenPass0_0
[info    ] [PASS] Running PRISM071_CheckerPass0_0
[info    ] [PASS] Running PRISM072_ArgInsPass0_0
[info    ] [PASS] Running PRISM073_BitfileGenPass0_0
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin created
[info    ] [PASS] Running PRISM074_UtilizationFileGenPass0_0
[info    ] [PASS] Running PRISM075_PmuStatsPass0_0
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_info.csv
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_ctx_info.csv
[info    ] [PASS] Running PRISM076_PostProcessSectionsPass0_0
[info    ] Freeing memory for compilation phase 0__0
[info    ] Incremental Passes for Section(s) 0__0 Completed.
[info    ] Incremental Passes Completed.
[info    ] [PASS] Running PRISM077_SymInitFunctionsPass
[info    ] [PASS] Running PRISM078_DataAllocPass
[info    ] [PASS] Running PRISM079_HostFifoPass
[info    ] [PASS] Running PRISM080_HostFunctionPass
[info    ] [PASS] Running PRISM081_DebugFileGenPass
[info    ] [PASS] Running PRISM082_PefGenPass
[info    ] symbol log file /scratch/jobs/38941840/jit_out/jit_out.symbol.log created
[info    ] PEF file /scratch/jobs/38941840/jit_out/jit_out.pef created
[info    ] PEF log file /scratch/jobs/38941840/jit_out/jit_out.pef.log created
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin loaded
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin.slam created
[info    ] [PASS] Running PRISM083_DatafileGenPass
[info    ] datafile /scratch/jobs/38941840/jit_out/jit_out.data created
[info    ] Data log file /scratch/jobs/38941840/jit_out/jit_out.data.log created
[info    ] PnR node feedback file created /scratch/jobs/38941840/jit_out/jit_out.node_feedback.json
[info    ] PnR partition feedback file created /scratch/jobs/38941840/jit_out/jit_out.partition_feedback.json
[info    ] Global Passes Completed.
[arc:info] Generated debug_cpp files placed in: /scratch/jobs/38941840/jit_out/imcg_cpp/arc_gen/
[arc:info] Generated files placed in: /scratch/jobs/38941840/jit_out/arc_gen/
[arc:info] Compilation succeeded.
[mac:info] Mac Compilation succeeded.
[compiler:info] copy pef /scratch/jobs/38941840/jit_out/jit_out.pef to /scratch/jobs/38941840/jit_out/jit_out.3.pef
[compiler:info] Successfully compiled pef at /scratch/jobs/38941840/jit_out/jit_out.pef
[JITPerf] force_evaluate::CompilePEF 688108929 ns
[JITPerf] force_evaluate::FilterInputs 22690 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 369145735 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5a9daf0 to: 0x55c88874db30
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c895035150 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 250 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5a9daf0 to: 0x55c8a5f0d5a0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_empty() 610 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88874db30 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5f0d5a0 to: 0x55c8a6979210
[compiler:info]   Source: 49152 bytes with name  0x55c8a7802260
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 21312834 ns
[JITPerf] &JIT::construct 111 ns
[JITPerf] get_rdu_tensor_impl() 211 ns
[JITPerf] update_ir() 2989 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 21483754 ns
[JITPerf] apply_binary() 21493004 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a664ca40 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a697c960 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 100 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6a4aef0 1 has_backanno: 0
[JITPerf] &JIT::construct 70 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 689113 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 1370 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 772453 ns
[JITPerf] apply_binary_in_place() 773853 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6a4aef0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8993c7fb0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a664ca40 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_empty() 111 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 51 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894fd8e00 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 45681 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 660 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 128401 ns
[JITPerf] apply_binary() 133041 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5699260 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888814fa0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 25840 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 7150 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 196091 ns
[JITPerf] apply_binary_in_place() 197291 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8948c2220 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24651 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 820 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 180951 ns
[JITPerf] apply_binary() 185421 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c899cd23d0 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8888155d0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 35550 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 740 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 181871 ns
[JITPerf] apply_ternary() 186941 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888815c00 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a692bac0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 49 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 31 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a664ca40 1 has_backanno: 0
[JITPerf] &JIT::construct 31 ns
[JITPerf] extract_inputs_helper() 37990 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 610 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 173280 ns
[JITPerf] apply_binary() 178280 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6d7abd0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 29 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8993cc380 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24451 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 6140 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 230032 ns
[JITPerf] apply_binary_in_place() 231281 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 9530 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 830 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 156071 ns
[JITPerf] apply_unary_out() 160981 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c899cd3660 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a58e5260 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ce2460 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 34470 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 560 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 189511 ns
[JITPerf] apply_binary() 193611 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ce4ee0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888804a40 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 28970 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 6090 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 259511 ns
[JITPerf] apply_binary_in_place() 260731 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 10570 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 71 ns
[JITPerf] update_ir() 791 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 249201 ns
[JITPerf] apply_binary() 254891 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_empty() 109 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888808340 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89a39dbe0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 43051 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 720 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 255721 ns
[JITPerf] apply_ternary() 260152 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89aefd890 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f32eb0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a58567e0 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 38330 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 581 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 250931 ns
[JITPerf] apply_binary() 255141 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6df8280 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 71 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89a5f42e0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 27560 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 6110 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 312591 ns
[JITPerf] apply_binary_in_place() 313892 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89a5f55c0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f32eb0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c883ada480 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 38461 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 51 ns
[JITPerf] update_ir() 660 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 273602 ns
[JITPerf] apply_binary() 277892 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a699a110 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89af02ea0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 27070 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 6170 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 336912 ns
[JITPerf] apply_binary_in_place() 338271 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89bc91a70 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f32eb0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a588c550 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 38120 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 295351 ns
[JITPerf] apply_binary() 300701 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7b2c0f0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89c114570 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 28741 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 6110 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 375232 ns
[JITPerf] apply_binary_in_place() 376652 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6eaff50 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ff57d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a619a010 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ff57d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6d785c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ff57d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c885a2e570 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f17380 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] force_evaluate::RDUTensorImpl 120 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 10
[JITPerf] force_evaluate::PrepareIR 115651 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%64) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%72) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 309831 ns
[compiler:info] ====== HASH INFO: b3c9e48b67f1b96a6af41cba742937f40e38bf96ba088f9f692b46e75cb1c2bc
[mac:warn] name collision detected for input_0
[mac:warn] name collision detected for input_1
[mac:warn] name collision detected for input_2
[mac:warn] name collision detected for air_Matmul_0
[mac:warn] name collision detected for air_Reshape_0
[mac:warn] name collision detected for Permute_1
[mac:warn] name collision detected for air_Reshape_1
[mac:warn] name collision detected for air_Reshape_2
[mac:warn] name collision detected for input_3
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for air_Matmul_1
[mac:warn] name collision detected for air_Reshape_3
[mac:warn] name collision detected for input_4
[mac:warn] name collision detected for air_Collect_0
[mac:warn] name collision detected for air_Collect_0_unary
[mac:warn] name collision detected for air_Collect_0_binary1
[mac:warn] name collision detected for air_Reshape_4
[mac:warn] name collision detected for air_Reshape_5
[mac:warn] name collision detected for input_5
[mac:warn] name collision detected for air_Collect_1
[mac:warn] name collision detected for air_Collect_1_unary
[mac:warn] name collision detected for air_Collect_1_binary1
[mac:warn] name collision detected for input_6
[mac:warn] name collision detected for input_7
[mac:warn] name collision detected for air_Reshape_6
[mac:warn] name collision detected for air_Reshape_7
[mac:warn] name collision detected for air_LayerNorm_0
[mac:warn] name collision detected for air_Reshape_8
[mac:warn] name collision detected for input_8
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for air_Matmul_2
[mac:warn] name collision detected for air_Reshape_9
[mac:warn] name collision detected for input_9
[mac:warn] name collision detected for air_Collect_2
[mac:warn] name collision detected for air_Collect_2_unary
[mac:warn] name collision detected for air_Collect_2_binary1
[mac:warn] name collision detected for air_Reshape_10
[mac:warn] name collision detected for air_Reshape_11
[mac:warn] name collision detected for air_Reshape_12
[mac:warn] name collision detected for input_10
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for air_Reshape_13
[mac:warn] name collision detected for air_Collect_3
[mac:warn] name collision detected for air_Collect_3_unary
[mac:warn] name collision detected for air_Collect_3_binary1
[mac:warn] name collision detected for air_Collect_4
[mac:warn] name collision detected for air_Collect_4_unary
[mac:warn] name collision detected for air_Collect_4_binary1
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for air_Output_0
[mac:warn] name collision detected for air_Output_1
[mac:warn] name collision detected for air_Output_2
[mac:warn] name collision detected for air_Output_3
[mac:warn] name collision detected for air_Output_4
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC394_AIRResourceAwarePeepholeOptIter converged after 2 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC401_AIRToTLIRLoweringNestedLoopsIter converged after 1 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
[mac:warn] Copy.cpp:163:0: [AIRToTLIRLowering] Precog Interjected: Converted TemporalConcat to use TBuffer.
[info    ] Total per-section passes: 77
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_tln_traffic_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.node_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pmu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pcu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.template_names.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.data
[info    ] Compiling graph for section 0
[mac:info] Building nameddims for graph jit_out
[mac:info] Analyze tiling for graph: jit_out
[mac:info] Mapping for graph jit_out
[mac:info] Set up stage ID and metapipe ID for section 0
[mac:info] MAC decided on the following section cuts for graph jit_out
[mac:info] Amortized resources overall: 3.100000e+01 PCUs, 2.660000e+02 PMUs, projected latency: 3.191720e-04 s, FLOPS: 7.127049e-01 T/s, DDR_BW: 4.267260e+01 GB/s
[mac:info] Lowering to TLIR succeeded.
[rail:info] Logs are generated in /scratch/jobs/38941840/jit_out//rail_gen//rail_compile_logs for partition_0_0_.
[rail:warn] PrismInfo.cpp:1056:0: TComputeContext: zipmapreduce_tcomp may have wrong behavior with respect to datatype width since stage0 ALU is not programmed.
[rail:info] Compilation succeeded for partition_0_0_. Elapsed time:  1285ms
[info    ] [PASS] Running PRISM000_PreProcessPass0_0
[info    ] Generated utilization report file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] [PASS] Running PRISM001_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM002_PlasmaIRPass0_0
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/sections_0_0
[compiler:info] Plasma compile succeeded.
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/schedule_0_0
[compiler:info] Plasma compile succeeded.
[info    ] [PASS] Running PRISM003_PlasmaIRSymbolAllocExportPass0_0
[info    ] [PASS] Running PRISM004_LegalizeUtilizationPass0_0
[info    ] [PASS] Running PRISM005_LegalizeSocketConnectionsPass0_0
[info    ] [PASS] Running PRISM006_LayoutConsolidationPass0_0
[info    ] [PASS] Running PRISM007_PmuLoadStoreSetupPass0_0
[info    ] [PASS] Running PRISM008_FinalizeIoPass0_0
[info    ] [PASS] Running PRISM009_CollectConnectionPass0_0
[info    ] [PASS] Running PRISM010_NetworkValidationPass0_0
[info    ] [PASS] Running PRISM011_DramAnalyticalReportPass0_0
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 1536 num_vector_without_request_length_overhead 384 reference_num_vector 384
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 1536 num_vector_without_request_length_overhead 384 reference_num_vector 384
[info    ] Logging dram analysis report to /scratch/jobs/38941840/jit_out/prism_gen/reports/dram_analysis.json
[info    ] [PASS] Running PRISM012_AsmIRGenPNRConnectPass0_0
[info    ] [PASS] Running PRISM013_PrintLoweringPass0_0
[info    ] [PASS] Running PRISM014_AsmIRResourceAllocationPass0_0
[info    ] [PASS] Running PRISM015_PmuExprCompilePass0_0
[info    ] [PASS] Running PRISM016_GroupAnnotationPass0_0
[info    ] [PASS] Running PRISM017_TemplateDataflowGraphPass0_0
[info    ] [PASS] Running PRISM018_BoxUtilizationLegalizerPass0_0
[info    ] [PASS] Running PRISM019_LegalizePartitionAssignmentPass0_0
[info    ] [PASS] Running PRISM020_ConditionValidationPass0_0
[info    ] [PASS] Running PRISM021_AssignMetapipeStagePass0_0
[info    ] [PASS] Running PRISM022_AnalyticalModelFileGenPass0_0
[info    ] [PASS] Running PRISM023_PlasmaIRProgramStatePass0_0
[info    ] [PASS] Running PRISM024_MetapipeStageLatencyPass0_0
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/MetapipeStageLatencyPass.cpp:635] Stage 38: Encountered gemm-like template BigGemm (biggemm_0_0_326) after streaming template Gelu (gelu_0_0_323), but gemm-like templates may only be adjacent to buffers!
[info    ] Generated metapipe stage graph dot file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[info    ] [PASS] Running PRISM025_MetapipeStageGraphPass0_0
[info    ] [PASS] Running PRISM026_BandwidthAnnotationPass0_0
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] 

============ Bandwidth QA Report ============

Total edges: 219
Bandwidth starving edges before pass (src/sink < 0.8): 65 (29.6804%)
Bandwidth back pressure edges before pass (src/sink > 1.2): 21 (9.58904%)
Missing source bandwidth after pass: 0 (0%)
Missing sink bandwidth after pass: 0 (0%)

[info    ] [PASS] Running PRISM027_FilePlacementPass_GenEdgeId0_0
[info    ] [PASS] Running PRISM028_FloorplanPass0_0
[info    ] Floorplanning log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM028_FloorplanPass0_0.FP.0.0.log
[info    ] [PASS] Running PRISM029_VagAllocPass0_0
[info    ] [PASS] Running PRISM030_AsmIRPrePortAllocAsmTransformPass0_0
[info    ] [PASS MANAGER] Start PnR
[info    ] [PASS] Running PRISM031_PlacerPass0_0
[info    ] Prism config stored in: /scratch/jobs/38941840/jit_out/jit_out.configs
[info    ] Launching placement flow with (set) 1 threads
[info    ] BoxPlanner log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.BP.0.0.log
[info    ] WavefrontPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.DFG.0.0.log
[info    ] SAPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.SA.0.0.log
[info    ] Placement runtime:	partition{0, 0}: 0s	
[info    ] [PASS] Running PRISM032_PmuTwinPass0_0
[info    ] [PASS] Running PRISM033_TemplateTileDoneLoweringPass0_0
[info    ] [PASS] Running PRISM034_VagConfigurePass0_0
[info    ] [PASS] Running PRISM035_VagAllocReportPass0_0
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/VagAllocReportPass.cpp:104] Found multiple batchsizes in input for timing group: ExecGroup batchsize: 24 vs 6
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/VagAllocReportPass.cpp:104] Found multiple batchsizes in input for timing group: ExecGroup batchsize: 24 vs 6
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/VagAllocReportPass.cpp:104] Found multiple batchsizes in input for timing group: ExecGroup batchsize: 24 vs 6
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/VagAllocReportPass.cpp:104] Found multiple batchsizes in input for timing group: ExecGroup batchsize: 24 vs 6
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/VagAllocReportPass.cpp:104] Found multiple batchsizes in input for timing group: ExecGroup batchsize: 24 vs 12
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/VagAllocReportPass.cpp:104] Found multiple batchsizes in input for timing group: ExecGroup batchsize: 24 vs 12
[info    ] [PASS] Running PRISM036_DataPortAllocatorPass0_0
[info    ] [PASS] Running PRISM037_AgcuOrchestrationPass0_0
[info    ] [PASS] Running PRISM038_RampControlPass0_0
[info    ] [PASS] Running PRISM039_E2EInjectionPass0_0
[info    ] [PASS] Running PRISM040_InstrumentationPreprocessPass0_0
[info    ] [PASS] Running PRISM041_BarrierLoweringPass0_0
[info    ] [PASS] Running PRISM042_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM043_ControlBandwidthAnnotationPass0_0
[info    ] [PASS] Running PRISM044_InstrumentationCounterPass0_0
[info    ] [PASS] Running PRISM045_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM046_ControlConnectorPass0_0
[info    ] [PASS] Running PRISM047_DataConnectorPass0_0
[info    ] [PASS MANAGER] Done with PnR
[info    ] [PASS] Running PRISM048_BandwidthReportPass0_0
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.VECTOR.0.0.log
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.SCALAR.0.0.log
[info    ] [PASS] Running PRISM049_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM050_ControlConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM051_DataConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM052_FinalizePass0_0
[info    ] [PASS] Running PRISM053_FinalizeSnapshotPass0_0
[info    ] [PASS] Running PRISM054_VagExprCompilePass0_0
[info    ] [PASS] Running PRISM055_WatermarkPass0_0
[info    ] [PASS] Running PRISM056_OrphanUnitPass0_0
[info    ] [PASS] Running PRISM057_BoxFileGenPass0_0
[info    ] [PASS] Running PRISM058_P2pPass0_0
[info    ] [PASS] Running PRISM059_AsmIRPostPortAllocAsmTransformPass0_0
[info    ] [PASS] Running PRISM060_DataSocketAnnotationPass0_0
[info    ] [PASS] Running PRISM061_AuroraFileGenPass0_0
[info    ] [PASS] Running PRISM062_AsmLegalizerPass0_0
[info    ] [PASS] Running PRISM063_ExpectedPacketCountAnnotationPass0_0
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:188] [Assembler] No counter chains found in streaming context, unable to determine expected_packet_count in gelu_0_0_323_output ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in biggemm_0_0_326_gemm_0_0_0_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in biggemm_0_0_326_gemm_0_0_1_PCU ctx0
[info    ] [PASS] Running PRISM064_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM065_AsmPlasticineCodegen0_0
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6384] JitOut.partition_0_0_.rbuf1a_0_0_180_D_0_0 rd0_0 forcing early done for send insn: send CtrlPortOut(15) L0.early()  where asm would have chosen a late done for CH-1223
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6384] JitOut.partition_0_0_.rbuf1a_0_0_203_D_0_0 rd0_0 forcing early done for send insn: send CtrlPortOut(15) L0.early()  where asm would have chosen a late done for CH-1223
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6384] JitOut.partition_0_0_.rbuf1a_0_0_236_D_0_0 rd0_0 forcing early done for send insn: send CtrlPortOut(0) L0.early()  where asm would have chosen a late done for CH-1223
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6384] JitOut.partition_0_0_.rbuf1a_0_0_246_D_0_0 rd0_0 forcing early done for send insn: send CtrlPortOut(15) L0.early()  where asm would have chosen a late done for CH-1223
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6384] JitOut.partition_0_0_.rbuf1a_0_0_256_D_0_0 rd0_0 forcing early done for send insn: send CtrlPortOut(0) L0.early()  where asm would have chosen a late done for CH-1223
[info    ] [PASS] Running PRISM066_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM067_PrintAsmPass_post_codegen0_0
[info    ] [PASS] Running PRISM068_PrintAsmPass_asm_ir_report0_0
[info    ] [PASS] Running PRISM069_RouteReportPass0_0
[info    ] [PASS] Running PRISM070_AgcuFileGenPass0_0
[info    ] [PASS] Running PRISM071_CheckerPass0_0
[info    ] [PASS] Running PRISM072_ArgInsPass0_0
[info    ] [PASS] Running PRISM073_BitfileGenPass0_0
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin created
[info    ] [PASS] Running PRISM074_UtilizationFileGenPass0_0
[info    ] [PASS] Running PRISM075_PmuStatsPass0_0
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_info.csv
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_ctx_info.csv
[info    ] [PASS] Running PRISM076_PostProcessSectionsPass0_0
[info    ] Freeing memory for compilation phase 0__0
[info    ] Incremental Passes for Section(s) 0__0 Completed.
[info    ] Incremental Passes Completed.
[info    ] [PASS] Running PRISM077_SymInitFunctionsPass
[info    ] [PASS] Running PRISM078_DataAllocPass
[info    ] [PASS] Running PRISM079_HostFifoPass
[info    ] [PASS] Running PRISM080_HostFunctionPass
[info    ] [PASS] Running PRISM081_DebugFileGenPass
[info    ] [PASS] Running PRISM082_PefGenPass
[info    ] symbol log file /scratch/jobs/38941840/jit_out/jit_out.symbol.log created
[info    ] PEF file /scratch/jobs/38941840/jit_out/jit_out.pef created
[info    ] PEF log file /scratch/jobs/38941840/jit_out/jit_out.pef.log created
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin loaded
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin.slam created
[info    ] [PASS] Running PRISM083_DatafileGenPass
[info    ] datafile /scratch/jobs/38941840/jit_out/jit_out.data created
[info    ] Data log file /scratch/jobs/38941840/jit_out/jit_out.data.log created
[info    ] PnR node feedback file created /scratch/jobs/38941840/jit_out/jit_out.node_feedback.json
[info    ] PnR partition feedback file created /scratch/jobs/38941840/jit_out/jit_out.partition_feedback.json
[info    ] Global Passes Completed.
[arc:info] Generated debug_cpp files placed in: /scratch/jobs/38941840/jit_out/imcg_cpp/arc_gen/
[arc:info] Generated files placed in: /scratch/jobs/38941840/jit_out/arc_gen/
[arc:info] Compilation succeeded.
[mac:info] Mac Compilation succeeded.
[compiler:info] copy pef /scratch/jobs/38941840/jit_out/jit_out.pef to /scratch/jobs/38941840/jit_out/jit_out.4.pef
[compiler:info] Successfully compiled pef at /scratch/jobs/38941840/jit_out/jit_out.pef
[JITPerf] force_evaluate::CompilePEF 3474234445 ns
[JITPerf] force_evaluate::FilterInputs 55311 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 364244972 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a9f4fcf0 to: 0x55c8a5854010
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ff57d0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 160 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a9f4fcf0 to: 0x55c8a7e1c000
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 580 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5854010 to: 0x55c8a7e1be10
[compiler:info]   Source: 49152 bytes with name  0x55c8aa6a95c0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7e1c000 to: 0x55c8a7e1b690
[compiler:info]   Source: 49152 bytes with name  0x55c8a9f4fec0
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 8865193 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 1550 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 8957283 ns
[JITPerf] apply_binary() 8962104 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ea3a0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] force_evaluate::RDUTensorImpl 130 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 17200 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 47950 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.2.pef
[JITPerf] force_evaluate::CompilePEF 89371 ns
[JITPerf] force_evaluate::FilterInputs 28360 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 369076755 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c8a6db9940 to: 0x55c8a6ff57d0
[compiler:info]   Source: 12288 bytes with name  0x55c8a9e5fb30
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 151 ns
[JITPerf] get_empty() 411 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a9f500c0 to: 0x55c8a7e1b690
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6ff57d0 to: 0x55c8a78ea3a0
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ea3a0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7e1b690 to: 0x55c8a78ea3a0
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ea3a0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 921124 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] update_ir() 1600 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 1011574 ns
[JITPerf] apply_binary() 1022434 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 17620 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 760 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 169140 ns
[JITPerf] apply_binary() 172951 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] extract_inputs_helper() 810 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 500 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 74511 ns
[JITPerf] apply_unary_out() 79080 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a7e1be10 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e1be10 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] force_evaluate::RDUTensorImpl 140 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 2
[JITPerf] force_evaluate::PrepareIR 28350 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%4) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 67670 ns
[compiler:info] ====== HASH INFO: c3ea57317300daa100f6736c2a377cf6e056e235efce7e8c4b16238a03d78ddf
[mac:warn] name collision detected for input_0
[mac:warn] name collision detected for input_1
[mac:warn] name collision detected for air_Div_0
[mac:warn] name collision detected for input_2
[mac:warn] name collision detected for air_Collect_0
[mac:warn] name collision detected for air_Collect_0_unary
[mac:warn] name collision detected for air_Collect_0_binary1
[mac:warn] name collision detected for air_Softmax_0
[mac:warn] name collision detected for air_Output_0
[mac:warn] name collision detected for air_Output_1
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC482_AIRResourceAwarePeepholeOptIter converged after 1 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC487_AIRToTLIRLoweringNestedLoopsIter converged after 2 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
[info    ] Total per-section passes: 77
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_tln_traffic_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.node_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pmu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pcu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.template_names.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.data
[info    ] Compiling graph for section 0
[mac:info] Building nameddims for graph jit_out
[mac:info] Analyze tiling for graph: jit_out
[mac:info] Mapping for graph jit_out
[mac:info] Set up stage ID and metapipe ID for section 0
[mac:info] MAC decided on the following section cuts for graph jit_out
[mac:info] Amortized resources overall: 6.000000e+00 PCUs, 2.100000e+01 PMUs, projected latency: 3.708282e-05 s, FLOPS: 9.112577e-04 T/s, DDR_BW: 4.637674e-01 GB/s
[mac:info] Lowering to TLIR succeeded.
[rail:info] Logs are generated in /scratch/jobs/38941840/jit_out//rail_gen//rail_compile_logs for partition_0_0_.
[rail:info] Compilation succeeded for partition_0_0_. Elapsed time:  121ms
[info    ] [PASS] Running PRISM000_PreProcessPass0_0
[info    ] Generated utilization report file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] [PASS] Running PRISM001_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM002_PlasmaIRPass0_0
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/sections_0_0
[compiler:info] Plasma compile succeeded.
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/schedule_0_0
[compiler:info] Plasma compile succeeded.
[info    ] [PASS] Running PRISM003_PlasmaIRSymbolAllocExportPass0_0
[info    ] [PASS] Running PRISM004_LegalizeUtilizationPass0_0
[info    ] [PASS] Running PRISM005_LegalizeSocketConnectionsPass0_0
[info    ] [PASS] Running PRISM006_LayoutConsolidationPass0_0
[info    ] [PASS] Running PRISM007_PmuLoadStoreSetupPass0_0
[info    ] [PASS] Running PRISM008_FinalizeIoPass0_0
[info    ] [PASS] Running PRISM009_CollectConnectionPass0_0
[info    ] [PASS] Running PRISM010_NetworkValidationPass0_0
[info    ] [PASS] Running PRISM011_DramAnalyticalReportPass0_0
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 8 num_vector_without_request_length_overhead 1 reference_num_vector 1
[info    ] Logging dram analysis report to /scratch/jobs/38941840/jit_out/prism_gen/reports/dram_analysis.json
[info    ] [PASS] Running PRISM012_AsmIRGenPNRConnectPass0_0
[info    ] [PASS] Running PRISM013_PrintLoweringPass0_0
[info    ] [PASS] Running PRISM014_AsmIRResourceAllocationPass0_0
[info    ] [PASS] Running PRISM015_PmuExprCompilePass0_0
[info    ] [PASS] Running PRISM016_GroupAnnotationPass0_0
[info    ] [PASS] Running PRISM017_TemplateDataflowGraphPass0_0
[info    ] [PASS] Running PRISM018_BoxUtilizationLegalizerPass0_0
[info    ] [PASS] Running PRISM019_LegalizePartitionAssignmentPass0_0
[info    ] [PASS] Running PRISM020_ConditionValidationPass0_0
[info    ] [PASS] Running PRISM021_AssignMetapipeStagePass0_0
[info    ] [PASS] Running PRISM022_AnalyticalModelFileGenPass0_0
[info    ] [PASS] Running PRISM023_PlasmaIRProgramStatePass0_0
[info    ] [PASS] Running PRISM024_MetapipeStageLatencyPass0_0
[info    ] Generated metapipe stage graph dot file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/MetapipeStageLatencyPass.cpp:886] This graph contains 1 unique templates with missing analytical models! They are: MeanPB 
[info    ] [PASS] Running PRISM025_MetapipeStageGraphPass0_0
[info    ] [PASS] Running PRISM026_BandwidthAnnotationPass0_0
[warning ] [../prism/src/plasma/lib/Core/Traversal/Transform/BandwidthAnnotationPass.cpp:230] PMU data sink socket softmax_0_0_64_fwdprop_pinput_PMU PMU Context: WRITE, 0 @ (255, 255, 0, 0):<PMU_INFIFO.VECTOR_SW: 4> has computed bandwidth smaller than user annotated bandwidth:  computed ideal bandwidth = 0.842105, annotated ideal bandwidth = 1
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_0.BWP.0.0.log
[info    ] 

============ Bandwidth QA Report ============

Total edges: 30
Bandwidth starving edges before pass (src/sink < 0.8): 12 (40%)
Bandwidth back pressure edges before pass (src/sink > 1.2): 4 (13.3333%)
Missing source bandwidth after pass: 0 (0%)
Missing sink bandwidth after pass: 0 (0%)

[info    ] [PASS] Running PRISM027_FilePlacementPass_GenEdgeId0_0
[info    ] [PASS] Running PRISM028_FloorplanPass0_0
[info    ] Floorplanning log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM028_FloorplanPass0_0.FP.0.0.log
[info    ] [PASS] Running PRISM029_VagAllocPass0_0
[info    ] [PASS] Running PRISM030_AsmIRPrePortAllocAsmTransformPass0_0
[info    ] [PASS MANAGER] Start PnR
[info    ] [PASS] Running PRISM031_PlacerPass0_0
[info    ] Prism config stored in: /scratch/jobs/38941840/jit_out/jit_out.configs
[info    ] Launching placement flow with (set) 1 threads
[info    ] BoxPlanner log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.BP.0.0.log
[info    ] WavefrontPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.DFG.0.0.log
[info    ] SAPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_0.SA.0.0.log
[info    ] Placement runtime:	partition{0, 0}: 0s	
[info    ] [PASS] Running PRISM032_PmuTwinPass0_0
[info    ] [PASS] Running PRISM033_TemplateTileDoneLoweringPass0_0
[info    ] [PASS] Running PRISM034_VagConfigurePass0_0
[info    ] [PASS] Running PRISM035_VagAllocReportPass0_0
[info    ] [PASS] Running PRISM036_DataPortAllocatorPass0_0
[info    ] [PASS] Running PRISM037_AgcuOrchestrationPass0_0
[info    ] [PASS] Running PRISM038_RampControlPass0_0
[info    ] [PASS] Running PRISM039_E2EInjectionPass0_0
[info    ] [PASS] Running PRISM040_InstrumentationPreprocessPass0_0
[info    ] [PASS] Running PRISM041_BarrierLoweringPass0_0
[info    ] [PASS] Running PRISM042_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM043_ControlBandwidthAnnotationPass0_0
[info    ] [PASS] Running PRISM044_InstrumentationCounterPass0_0
[info    ] [PASS] Running PRISM045_ControlPortAllocatorPass0_0
[info    ] [PASS] Running PRISM046_ControlConnectorPass0_0
[info    ] [PASS] Running PRISM047_DataConnectorPass0_0
[warning ] [../prism/src/plasma/lib/Core/Connector/ConnectorUtils.cpp:688] E2E limit reset to manhatten distance as the E2E limit 13.4823 can not be met for connection: JitOut.partition_0_0_.rbuf2a_0_0_43_D_0_0 PMU Context: READ0, 0 @ (23, 1, 0, 0):<PMU_OUTPUT_PORTS.SCALAR_NW: 0> -> JitOut.partition_0_0_.collect_0_0_63.zipmapreduce_tcomp_zipmapreduce_tcomp PCU Context: 0 (input 0, output 0) @ (9, 0, 0, 0):<PCU_INPUT_PORTS.SCALAR_SE: 1>
[info    ] [PASS MANAGER] Done with PnR
[info    ] [PASS] Running PRISM048_BandwidthReportPass0_0
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.VECTOR.0.0.log
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_0.SCALAR.0.0.log
[info    ] [PASS] Running PRISM049_FeedbackGenPass0_0
[info    ] [PASS] Running PRISM050_ControlConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM051_DataConnectionCodegenPass0_0
[info    ] [PASS] Running PRISM052_FinalizePass0_0
[info    ] [PASS] Running PRISM053_FinalizeSnapshotPass0_0
[info    ] [PASS] Running PRISM054_VagExprCompilePass0_0
[info    ] [PASS] Running PRISM055_WatermarkPass0_0
[info    ] [PASS] Running PRISM056_OrphanUnitPass0_0
[info    ] [PASS] Running PRISM057_BoxFileGenPass0_0
[info    ] [PASS] Running PRISM058_P2pPass0_0
[info    ] [PASS] Running PRISM059_AsmIRPostPortAllocAsmTransformPass0_0
[info    ] [PASS] Running PRISM060_DataSocketAnnotationPass0_0
[info    ] [PASS] Running PRISM061_AuroraFileGenPass0_0
[info    ] [PASS] Running PRISM062_AsmLegalizerPass0_0
[info    ] [PASS] Running PRISM063_ExpectedPacketCountAnnotationPass0_0
[info    ] [PASS] Running PRISM064_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM065_AsmPlasticineCodegen0_0
[info    ] [PASS] Running PRISM066_ConnectionPatchPass0_0
[info    ] [PASS] Running PRISM067_PrintAsmPass_post_codegen0_0
[info    ] [PASS] Running PRISM068_PrintAsmPass_asm_ir_report0_0
[info    ] [PASS] Running PRISM069_RouteReportPass0_0
[info    ] [PASS] Running PRISM070_AgcuFileGenPass0_0
[info    ] [PASS] Running PRISM071_CheckerPass0_0
[info    ] [PASS] Running PRISM072_ArgInsPass0_0
[info    ] [PASS] Running PRISM073_BitfileGenPass0_0
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin created
[info    ] [PASS] Running PRISM074_UtilizationFileGenPass0_0
[info    ] [PASS] Running PRISM075_PmuStatsPass0_0
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_info.csv
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_0.pmu_stat_ctx_info.csv
[info    ] [PASS] Running PRISM076_PostProcessSectionsPass0_0
[info    ] Freeing memory for compilation phase 0__0
[info    ] Incremental Passes for Section(s) 0__0 Completed.
[info    ] Incremental Passes Completed.
[info    ] [PASS] Running PRISM077_SymInitFunctionsPass
[info    ] [PASS] Running PRISM078_DataAllocPass
[info    ] [PASS] Running PRISM079_HostFifoPass
[info    ] [PASS] Running PRISM080_HostFunctionPass
[info    ] [PASS] Running PRISM081_DebugFileGenPass
[info    ] [PASS] Running PRISM082_PefGenPass
[info    ] symbol log file /scratch/jobs/38941840/jit_out/jit_out.symbol.log created
[info    ] PEF file /scratch/jobs/38941840/jit_out/jit_out.pef created
[info    ] PEF log file /scratch/jobs/38941840/jit_out/jit_out.pef.log created
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin loaded
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.bin.slam created
[info    ] [PASS] Running PRISM083_DatafileGenPass
[info    ] datafile /scratch/jobs/38941840/jit_out/jit_out.data created
[info    ] Data log file /scratch/jobs/38941840/jit_out/jit_out.data.log created
[info    ] PnR node feedback file created /scratch/jobs/38941840/jit_out/jit_out.node_feedback.json
[info    ] PnR partition feedback file created /scratch/jobs/38941840/jit_out/jit_out.partition_feedback.json
[info    ] Global Passes Completed.
[arc:info] Generated debug_cpp files placed in: /scratch/jobs/38941840/jit_out/imcg_cpp/arc_gen/
[arc:info] Generated files placed in: /scratch/jobs/38941840/jit_out/arc_gen/
[arc:info] Compilation succeeded.
[mac:info] Mac Compilation succeeded.
[compiler:info] copy pef /scratch/jobs/38941840/jit_out/jit_out.pef to /scratch/jobs/38941840/jit_out/jit_out.5.pef
[compiler:info] Successfully compiled pef at /scratch/jobs/38941840/jit_out/jit_out.pef
[JITPerf] force_evaluate::CompilePEF 549807450 ns
[JITPerf] force_evaluate::FilterInputs 22150 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 375676047 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7acdbc0 to: 0x55c8a6ff57d0
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c895012e10 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 151 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7acdbc0 to: 0x55c8a9f52700
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 500 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ff57d0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a9f52700 to: 0x55c894fa4120
[compiler:info]   Source: 49152 bytes with name  0x55c8a7db1030
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 12105438 ns
[JITPerf] &JIT::construct 90 ns
[JITPerf] get_rdu_tensor_impl() 180 ns
[JITPerf] update_ir() 2380 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 12251179 ns
[JITPerf] apply_binary() 12256739 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ea3a0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5699260 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 71 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a57fce30 1 has_backanno: 0
[JITPerf] &JIT::construct 110 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 49 ns
[JITPerf] extract_inputs_helper() 595863 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 120 ns
[JITPerf] update_ir() 2011 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 722113 ns
[JITPerf] apply_binary_in_place() 724354 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a57fce30 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89c11b740 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ea3a0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 380 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f17380 1 has_backanno: 0
[JITPerf] &JIT::construct 60 ns
[JITPerf] extract_inputs_helper() 66661 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] update_ir() 1040 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 192721 ns
[JITPerf] apply_binary() 200181 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ce26a0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 110 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 50 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88871c370 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 39790 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 160 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] update_ir() 12250 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 310322 ns
[JITPerf] apply_binary_in_place() 312272 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f32eb0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 38730 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 49 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 51 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 110 ns
[JITPerf] update_ir() 1380 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 293022 ns
[JITPerf] apply_binary() 300402 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 210 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888797e50 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887b62a0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 50220 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 120 ns
[JITPerf] update_ir() 1341 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 318691 ns
[JITPerf] apply_ternary() 326631 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888798270 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a805f310 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 100 ns
[JITPerf] get_empty() 131 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ea3a0 1 has_backanno: 0
[JITPerf] &JIT::construct 50 ns
[JITPerf] extract_inputs_helper() 58710 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 1090 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 279031 ns
[JITPerf] apply_binary() 286051 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5699260 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 70 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888752b10 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 44800 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 7470 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 320922 ns
[JITPerf] apply_binary_in_place() 322142 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] extract_inputs_helper() 9410 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 730 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 151351 ns
[JITPerf] apply_unary_out() 156580 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888715850 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6f88f80 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 31 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f04320 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 32850 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 580 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 185901 ns
[JITPerf] apply_binary() 189812 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7106a00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 49 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88875cdf0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24120 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5960 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 248702 ns
[JITPerf] apply_binary_in_place() 249882 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 11860 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 990 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 271931 ns
[JITPerf] apply_binary() 277781 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c896e23210 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888756350 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 31980 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 620 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 240541 ns
[JITPerf] apply_ternary() 245332 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888756600 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e60440 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a57fffc0 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 33990 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 570 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 242311 ns
[JITPerf] apply_binary() 246401 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc1e20 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88871c620 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 25130 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 89 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] update_ir() 6129 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 313012 ns
[JITPerf] apply_binary_in_place() 314342 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887181a0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e60440 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7197260 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 32850 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 650 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 260891 ns
[JITPerf] apply_binary() 265401 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a76c8ff0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88870cac0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 25680 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 6020 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 329582 ns
[JITPerf] apply_binary_in_place() 330892 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887c9910 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e60440 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6046f20 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 34350 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 670 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 296462 ns
[JITPerf] apply_binary() 300762 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a832bc30 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88879d100 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24240 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 7350 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 381751 ns
[JITPerf] apply_binary_in_place() 383032 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5ff7110 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a832e9c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7107d10 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a832e9c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5b3b550 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a832e9c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a80ec590 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7ffe8e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] force_evaluate::RDUTensorImpl 149 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 10
[JITPerf] force_evaluate::PrepareIR 99581 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%64) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%72) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 310772 ns
[compiler:info] ====== HASH INFO: b3c9e48b67f1b96a6af41cba742937f40e38bf96ba088f9f692b46e75cb1c2bc
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.4.pef
[JITPerf] force_evaluate::CompilePEF 498422 ns
[JITPerf] force_evaluate::FilterInputs 67660 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 374770423 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6ad3010 to: 0x55c89501a460
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a832e9c0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 160 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6ad3010 to: 0x55c8a6ce26a0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_empty() 480 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c89501a460 to: 0x55c8a7c582b0
[compiler:info]   Source: 49152 bytes with name  0x55c8a832a180
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6ce26a0 to: 0x55c895012e10
[compiler:info]   Source: 49152 bytes with name  0x55c8a7ba4cd0
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 608263 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 1851 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 708754 ns
[JITPerf] apply_binary() 713264 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71c5bb0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] force_evaluate::RDUTensorImpl 130 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 17330 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 47101 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.2.pef
[JITPerf] force_evaluate::CompilePEF 88970 ns
[JITPerf] force_evaluate::FilterInputs 25400 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 368473113 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c885a2e570 to: 0x55c8a832e9c0
[compiler:info]   Source: 12288 bytes with name  0x55c8a7d9c1b0
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 180 ns
[JITPerf] get_empty() 510 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 80 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5ff8bc0 to: 0x55c895012e10
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a832e9c0 to: 0x55c8a71c5bb0
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71c5bb0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c895012e10 to: 0x55c8a71c5bb0
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71c5bb0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 1220276 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 200 ns
[JITPerf] update_ir() 2480 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 1367827 ns
[JITPerf] apply_binary() 1382647 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 160 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 27590 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 51 ns
[JITPerf] &JIT::construct 49 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 120 ns
[JITPerf] update_ir() 1320 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 265161 ns
[JITPerf] apply_binary() 271931 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 150 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] extract_inputs_helper() 1340 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] update_ir() 830 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 123911 ns
[JITPerf] apply_unary_out() 131130 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a7c582b0 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7c582b0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 120 ns
[JITPerf] force_evaluate::RDUTensorImpl 130 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 2
[JITPerf] force_evaluate::PrepareIR 27490 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%4) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 69511 ns
[compiler:info] ====== HASH INFO: c3ea57317300daa100f6736c2a377cf6e056e235efce7e8c4b16238a03d78ddf
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.5.pef
[JITPerf] force_evaluate::CompilePEF 122110 ns
[JITPerf] force_evaluate::FilterInputs 31560 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 364772095 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5ff8bc0 to: 0x55c89506e9f0
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a96b8750 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 150 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5ff8bc0 to: 0x55c8a5699260
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 500 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89506e9f0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5699260 to: 0x55c894fa4120
[compiler:info]   Source: 49152 bytes with name  0x55c887e21810
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 556433 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 1590 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 652603 ns
[JITPerf] apply_binary() 657294 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71c5bb0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a8063b30 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fba0a0 1 has_backanno: 0
[JITPerf] &JIT::construct 49 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] extract_inputs_helper() 345962 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] update_ir() 1280 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 418412 ns
[JITPerf] apply_binary_in_place() 419622 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fba0a0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888733e90 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a8063b30 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a96b8750 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 39960 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 590 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 113850 ns
[JITPerf] apply_binary() 118140 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7ffe8e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 31 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887acc20 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23711 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 14820 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 198651 ns
[JITPerf] apply_binary_in_place() 199790 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_empty() 60 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e60440 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 29371 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 940 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 204412 ns
[JITPerf] apply_binary() 209541 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_empty() 390 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88870e4b0 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88870e8f0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 32660 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 670 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 165150 ns
[JITPerf] apply_ternary() 170320 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888723210 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a76c8ff0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 120 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a8063b30 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 34981 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 549 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 162531 ns
[JITPerf] apply_binary() 166931 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5586d70 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888757870 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23870 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5850 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 222551 ns
[JITPerf] apply_binary_in_place() 223751 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] extract_inputs_helper() 9189 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 51 ns
[JITPerf] update_ir() 740 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 149430 ns
[JITPerf] apply_unary_out() 154931 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c899ccf950 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a68594c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a9709b80 1 has_backanno: 0
[JITPerf] &JIT::construct 29 ns
[JITPerf] extract_inputs_helper() 32040 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 529 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 182421 ns
[JITPerf] apply_binary() 186371 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a70b85f0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89a15ba10 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23971 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] update_ir() 5780 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 247641 ns
[JITPerf] apply_binary_in_place() 248871 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] extract_inputs_helper() 9960 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] update_ir() 950 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 290681 ns
[JITPerf] apply_binary() 295691 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89aef69d0 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88888de90 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 31430 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 91 ns
[JITPerf] update_ir() 671 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 235911 ns
[JITPerf] apply_ternary() 240171 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887d1590 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7075fd0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 60 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a79e66e0 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 33380 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 560 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 235721 ns
[JITPerf] apply_binary() 240131 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a63a0110 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c899f1a7a0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24170 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] update_ir() 5780 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 299601 ns
[JITPerf] apply_binary_in_place() 300851 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89b8055e0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7075fd0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5ee2b60 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 33560 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 258941 ns
[JITPerf] apply_binary() 263131 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f17dc0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888723780 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24680 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5801 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 324212 ns
[JITPerf] apply_binary_in_place() 325422 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887cd510 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7075fd0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6341c90 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 34470 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 670 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 292211 ns
[JITPerf] apply_binary() 296501 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6427020 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887fc990 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24230 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 120 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 7260 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 379152 ns
[JITPerf] apply_binary_in_place() 380392 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6cf6830 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a701f400 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71bea90 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a701f400 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a62c12d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a701f400 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78f9250 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f0a7c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] force_evaluate::RDUTensorImpl 110 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 10
[JITPerf] force_evaluate::PrepareIR 100301 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%64) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%72) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 302591 ns
[compiler:info] ====== HASH INFO: b3c9e48b67f1b96a6af41cba742937f40e38bf96ba088f9f692b46e75cb1c2bc
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.4.pef
[JITPerf] force_evaluate::CompilePEF 463482 ns
[JITPerf] force_evaluate::FilterInputs 61351 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 367700658 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8949a7090 to: 0x55c8a71c5bb0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a701f400 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 140 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8949a7090 to: 0x55c8a7ffe8e0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_empty() 500 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a71c5bb0 to: 0x55c8a70b85f0
[compiler:info]   Source: 49152 bytes with name  0x55c8a6986450
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7ffe8e0 to: 0x55c8a8363ab0
[compiler:info]   Source: 49152 bytes with name  0x55c8a6e46e00
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 608053 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 71 ns
[JITPerf] update_ir() 1660 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 706834 ns
[JITPerf] apply_binary() 711394 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c895053750 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] force_evaluate::RDUTensorImpl 140 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 17080 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 47991 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.2.pef
[JITPerf] force_evaluate::CompilePEF 89550 ns
[JITPerf] force_evaluate::FilterInputs 26080 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 364258792 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c8a5f0d770 to: 0x55c8a701f400
[compiler:info]   Source: 12288 bytes with name  0x55c8a5ff9910
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 180 ns
[JITPerf] get_empty() 510 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 70 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6a4c710 to: 0x55c8a8363ab0
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a701f400 to: 0x55c8a5e4ad80
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5e4ad80 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a8363ab0 to: 0x55c8a5e4ad80
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5e4ad80 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 1198986 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 170 ns
[JITPerf] update_ir() 2640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 1336696 ns
[JITPerf] apply_binary() 1350616 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 140 ns
[JITPerf] get_empty() 240 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 27140 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 109 ns
[JITPerf] update_ir() 1300 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 266321 ns
[JITPerf] apply_binary() 275171 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 100 ns
[JITPerf] get_empty() 100 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 51 ns
[JITPerf] extract_inputs_helper() 1409 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 860 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 124041 ns
[JITPerf] apply_unary_out() 131551 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a70b85f0 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a70b85f0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] force_evaluate::RDUTensorImpl 120 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 2
[JITPerf] force_evaluate::PrepareIR 27810 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%4) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 69820 ns
[compiler:info] ====== HASH INFO: c3ea57317300daa100f6736c2a377cf6e056e235efce7e8c4b16238a03d78ddf
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.5.pef
[JITPerf] force_evaluate::CompilePEF 122391 ns
[JITPerf] force_evaluate::FilterInputs 27730 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 366829594 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6a4c710 to: 0x55c895053750
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6dc2ec0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 210 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6a4c710 to: 0x55c8a659ba00
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_empty() 500 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 51 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c895053750 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a659ba00 to: 0x55c8a6fc6230
[compiler:info]   Source: 49152 bytes with name  0x55c8a69e6eb0
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 578313 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 110 ns
[JITPerf] update_ir() 1930 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 680894 ns
[JITPerf] apply_binary() 685364 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5e4ad80 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5586d70 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f1e4b0 1 has_backanno: 0
[JITPerf] &JIT::construct 60 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 355602 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 1580 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 428892 ns
[JITPerf] apply_binary_in_place() 430162 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f1e4b0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888869340 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5586d70 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 170 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6dc2ec0 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 49720 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 570 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 126090 ns
[JITPerf] apply_binary() 131120 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f0a7c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888878790 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24230 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 7170 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 190500 ns
[JITPerf] apply_binary_in_place() 191620 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7075fd0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 25410 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 830 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 177130 ns
[JITPerf] apply_binary() 182231 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888878990 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88880f970 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 30680 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 650 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 164221 ns
[JITPerf] apply_ternary() 168700 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88880fb70 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6e92c00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5586d70 1 has_backanno: 0
[JITPerf] &JIT::construct 31 ns
[JITPerf] extract_inputs_helper() 35000 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 69 ns
[JITPerf] update_ir() 611 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 164561 ns
[JITPerf] apply_binary() 168671 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6f30c00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888810030 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23320 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5990 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 222461 ns
[JITPerf] apply_binary_in_place() 223731 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] extract_inputs_helper() 10200 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 69 ns
[JITPerf] update_ir() 800 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 153681 ns
[JITPerf] apply_unary_out() 159371 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888810230 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894f62b10 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 29 ns
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887a64f0 1 has_backanno: 0
[JITPerf] &JIT::construct 29 ns
[JITPerf] extract_inputs_helper() 32700 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 51 ns
[JITPerf] update_ir() 550 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 186420 ns
[JITPerf] apply_binary() 190291 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7697150 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8993cae20 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23571 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5950 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 255871 ns
[JITPerf] apply_binary_in_place() 257142 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 9920 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 830 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 243871 ns
[JITPerf] apply_binary() 248881 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 100 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8993cb020 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8888034e0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 32000 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 680 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 237431 ns
[JITPerf] apply_ternary() 241841 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8888036e0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6df7610 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_empty() 60 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a59b3b60 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 33650 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 570 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 239951 ns
[JITPerf] apply_binary() 244102 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6c83940 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89aefc450 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24340 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] update_ir() 6010 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 297661 ns
[JITPerf] apply_binary_in_place() 299001 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89aefc650 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6df7610 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6dfaeb0 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 33370 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 610 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 263711 ns
[JITPerf] apply_binary() 268071 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a612ffb0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89b80b190 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24670 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 71 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] update_ir() 5769 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 320662 ns
[JITPerf] apply_binary_in_place() 321932 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89b80b390 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6df7610 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e36a60 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 34440 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 650 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 285651 ns
[JITPerf] apply_binary() 289921 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e149e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 51 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89c11a240 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24309 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] update_ir() 5870 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 351612 ns
[JITPerf] apply_binary_in_place() 353011 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7dfe650 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7c0d700 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5e96920 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7c0d700 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f17dc0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7c0d700 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc15f0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f19470 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] force_evaluate::RDUTensorImpl 120 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 10
[JITPerf] force_evaluate::PrepareIR 99870 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%64) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%72) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 302242 ns
[compiler:info] ====== HASH INFO: b3c9e48b67f1b96a6af41cba742937f40e38bf96ba088f9f692b46e75cb1c2bc
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.4.pef
[JITPerf] force_evaluate::CompilePEF 467002 ns
[JITPerf] force_evaluate::FilterInputs 58151 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 374349470 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c886534b30 to: 0x55c8a5e4ad80
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7c0d700 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 140 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c886534b30 to: 0x55c8a5f0a7c0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_empty() 500 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5e4ad80 to: 0x55c8a5ea58b0
[compiler:info]   Source: 49152 bytes with name  0x55c8a6ff1470
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5f0a7c0 to: 0x55c8a7c4eff0
[compiler:info]   Source: 49152 bytes with name  0x55c8a6e6f340
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 651513 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 1660 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 741794 ns
[JITPerf] apply_binary() 746233 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6589830 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] force_evaluate::RDUTensorImpl 140 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 18130 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 44840 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.2.pef
[JITPerf] force_evaluate::CompilePEF 90350 ns
[JITPerf] force_evaluate::FilterInputs 26570 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 360893946 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c8a5f1ba10 to: 0x55c8a7c0d700
[compiler:info]   Source: 12288 bytes with name  0x55c8a6bc7c30
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 149 ns
[JITPerf] get_empty() 520 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a58e5010 to: 0x55c8a7c4eff0
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7c0d700 to: 0x55c8a6589830
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6589830 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7c4eff0 to: 0x55c8a6589830
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6589830 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 864815 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 1580 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 952965 ns
[JITPerf] apply_binary() 964635 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_empty() 69 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 17200 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 740 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 165750 ns
[JITPerf] apply_binary() 169641 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_empty() 100 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] extract_inputs_helper() 1091 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 750 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 97080 ns
[JITPerf] apply_unary_out() 102530 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a5ea58b0 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5ea58b0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] force_evaluate::RDUTensorImpl 140 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 2
[JITPerf] force_evaluate::PrepareIR 28520 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%4) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 73590 ns
[compiler:info] ====== HASH INFO: c3ea57317300daa100f6736c2a377cf6e056e235efce7e8c4b16238a03d78ddf
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.5.pef
[JITPerf] force_evaluate::CompilePEF 126340 ns
[JITPerf] force_evaluate::FilterInputs 25901 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 363216357 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a58e5010 to: 0x55c8a78f7bb0
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f5d5c0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 220 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a58e5010 to: 0x55c8a6fccc70
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 100 ns
[JITPerf] get_empty() 451 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78f7bb0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6fccc70 to: 0x55c8a6f30c00
[compiler:info]   Source: 49152 bytes with name  0x55c8a5f15540
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 931484 ns
[JITPerf] &JIT::construct 120 ns
[JITPerf] get_rdu_tensor_impl() 210 ns
[JITPerf] update_ir() 2630 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 1104815 ns
[JITPerf] apply_binary() 1113426 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6589830 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6da4c30 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 130 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7201c40 1 has_backanno: 0
[JITPerf] &JIT::construct 200 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 71 ns
[JITPerf] &JIT::construct 69 ns
[JITPerf] extract_inputs_helper() 786564 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 220 ns
[JITPerf] update_ir() 2980 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 952034 ns
[JITPerf] apply_binary_in_place() 954804 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7201c40 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89c11a440 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6da4c30 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 100 ns
[JITPerf] get_empty() 209 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 69 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] &JIT::construct 70 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f5d5c0 1 has_backanno: 0
[JITPerf] &JIT::construct 80 ns
[JITPerf] extract_inputs_helper() 84500 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 150 ns
[JITPerf] update_ir() 1360 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 252151 ns
[JITPerf] apply_binary() 261991 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f19470 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_rdu_tensor_impl() 130 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887b5a50 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 49600 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 190 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] update_ir() 14180 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 394542 ns
[JITPerf] apply_binary_in_place() 397122 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_empty() 150 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6df7610 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 49751 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 130 ns
[JITPerf] update_ir() 1740 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 388652 ns
[JITPerf] apply_binary() 399212 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_empty() 260 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 71 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887b5c50 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887bf390 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 65100 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 140 ns
[JITPerf] update_ir() 1550 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 368501 ns
[JITPerf] apply_ternary() 378231 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887bf590 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6e667d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 89 ns
[JITPerf] get_empty() 140 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 71 ns
[JITPerf] &JIT::construct 71 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6da4c30 1 has_backanno: 0
[JITPerf] &JIT::construct 60 ns
[JITPerf] extract_inputs_helper() 73091 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 130 ns
[JITPerf] update_ir() 1350 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 358912 ns
[JITPerf] apply_binary() 368022 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a57eb210 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 91 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 69 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888763d20 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 49390 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 100 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 150 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] update_ir() 13260 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 505373 ns
[JITPerf] apply_binary_in_place() 508212 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 100 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] extract_inputs_helper() 20120 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 150 ns
[JITPerf] update_ir() 1510 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 337892 ns
[JITPerf] apply_unary_out() 349622 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888763f20 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6a4b0c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 180 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 70 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a619a300 1 has_backanno: 0
[JITPerf] &JIT::construct 80 ns
[JITPerf] extract_inputs_helper() 71740 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 160 ns
[JITPerf] update_ir() 1170 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 437452 ns
[JITPerf] apply_binary() 446262 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5623570 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 70 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888724b10 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 49380 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 160 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] update_ir() 13031 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 545693 ns
[JITPerf] apply_binary_in_place() 548323 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_empty() 171 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 69 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] extract_inputs_helper() 21910 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 180 ns
[JITPerf] update_ir() 1680 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 542122 ns
[JITPerf] apply_binary() 552983 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 91 ns
[JITPerf] get_empty() 169 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 69 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888724d10 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887a0b70 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 63090 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 120 ns
[JITPerf] update_ir() 1370 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 545322 ns
[JITPerf] apply_ternary() 554863 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887a0d70 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ebe90 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 170 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 70 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6c4bcb0 1 has_backanno: 0
[JITPerf] &JIT::construct 80 ns
[JITPerf] extract_inputs_helper() 69430 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] update_ir() 1370 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 529462 ns
[JITPerf] apply_binary() 538722 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6eaf070 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 120 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888779f70 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 49970 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 190 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] update_ir() 13420 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 690903 ns
[JITPerf] apply_binary_in_place() 693793 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88877a170 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ebe90 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 170 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a56dab30 1 has_backanno: 0
[JITPerf] &JIT::construct 60 ns
[JITPerf] extract_inputs_helper() 71670 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 140 ns
[JITPerf] update_ir() 1480 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 631683 ns
[JITPerf] apply_binary() 641563 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e36d20 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 70 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888728150 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 53830 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 71 ns
[JITPerf] &JIT::construct 71 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 130 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] update_ir() 13390 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 652033 ns
[JITPerf] apply_binary_in_place() 653393 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888728350 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ebe90 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 29 ns
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a83efcb0 1 has_backanno: 0
[JITPerf] &JIT::construct 31 ns
[JITPerf] extract_inputs_helper() 34080 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 620 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 287152 ns
[JITPerf] apply_binary() 291411 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894f8de20 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887a6050 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24270 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 6050 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 351552 ns
[JITPerf] apply_binary_in_place() 352832 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7c52ea0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fca00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89506fca0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fca00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6eafb00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fca00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6d7b400 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78f4990 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] force_evaluate::RDUTensorImpl 150 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 10
[JITPerf] force_evaluate::PrepareIR 112201 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%64) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%72) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 303501 ns
[compiler:info] ====== HASH INFO: b3c9e48b67f1b96a6af41cba742937f40e38bf96ba088f9f692b46e75cb1c2bc
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.4.pef
[JITPerf] force_evaluate::CompilePEF 465173 ns
[JITPerf] force_evaluate::FilterInputs 53560 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 364588984 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5ff8bc0 to: 0x55c8a6589830
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fca00 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 140 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5ff8bc0 to: 0x55c8a7f19470
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 520 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6589830 to: 0x55c894f55190
[compiler:info]   Source: 49152 bytes with name  0x55c8a6fc6520
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7f19470 to: 0x55c8a7ae2d80
[compiler:info]   Source: 49152 bytes with name  0x55c8a6c4c200
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 655473 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 1750 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 746263 ns
[JITPerf] apply_binary() 750603 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5eb8950 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] force_evaluate::RDUTensorImpl 130 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 17860 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 44830 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.2.pef
[JITPerf] force_evaluate::CompilePEF 88921 ns
[JITPerf] force_evaluate::FilterInputs 29080 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 366099720 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c8a78d1fc0 to: 0x55c8a78fca00
[compiler:info]   Source: 12288 bytes with name  0x55c8a6c13720
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 140 ns
[JITPerf] get_empty() 420 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5ff8bc0 to: 0x55c8a7ae2d80
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a78fca00 to: 0x55c8a5eb8950
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5eb8950 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7ae2d80 to: 0x55c8a5eb8950
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5eb8950 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 842184 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] update_ir() 1780 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 940364 ns
[JITPerf] apply_binary() 950694 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_empty() 89 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 16541 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] update_ir() 940 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 192992 ns
[JITPerf] apply_binary() 197041 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] extract_inputs_helper() 870 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 590 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 75870 ns
[JITPerf] apply_unary_out() 80350 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c894f55190 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894f55190 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] force_evaluate::RDUTensorImpl 130 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 2
[JITPerf] force_evaluate::PrepareIR 27830 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%4) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 74040 ns
[compiler:info] ====== HASH INFO: c3ea57317300daa100f6736c2a377cf6e056e235efce7e8c4b16238a03d78ddf
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.5.pef
[JITPerf] force_evaluate::CompilePEF 125541 ns
[JITPerf] force_evaluate::FilterInputs 27050 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 359449559 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5ff8bc0 to: 0x55c8a83ee890
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6acf220 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 140 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5ff8bc0 to: 0x55c8a57eb210
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 480 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a83ee890 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a57eb210 to: 0x55c8a83ebc70
[compiler:info]   Source: 49152 bytes with name  0x55c8a5e03650
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 555173 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 1790 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 657933 ns
[JITPerf] apply_binary() 662473 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5eb8950 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ae6580 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a721c640 1 has_backanno: 0
[JITPerf] &JIT::construct 80 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] extract_inputs_helper() 348982 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 1280 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 422042 ns
[JITPerf] apply_binary_in_place() 423262 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a721c640 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887a6280 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ae6580 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 131 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6acf220 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 40820 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 570 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 116091 ns
[JITPerf] apply_binary() 120371 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78f4990 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88892bd10 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 28620 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] update_ir() 8920 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 219671 ns
[JITPerf] apply_binary_in_place() 220751 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_empty() 71 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ebe90 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23760 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 800 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 174081 ns
[JITPerf] apply_binary() 178760 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 111 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88892bf10 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888816f40 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 30330 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 161241 ns
[JITPerf] apply_ternary() 165651 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888817140 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ed4a0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ae6580 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 35300 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 530 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 162051 ns
[JITPerf] apply_binary() 166371 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ff3790 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ee7d0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24300 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5840 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 228331 ns
[JITPerf] apply_binary_in_place() 229511 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 9550 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 780 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 149331 ns
[JITPerf] apply_unary_out() 155011 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ee9d0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88877a760 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f0c1b0 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 33100 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 530 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 183721 ns
[JITPerf] apply_binary() 187601 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888879020 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c899cce4a0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23990 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 69 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] update_ir() 5800 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 247071 ns
[JITPerf] apply_binary_in_place() 248301 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] extract_inputs_helper() 10450 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] update_ir() 770 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 263071 ns
[JITPerf] apply_binary() 268002 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 120 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c899cce6a0 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c899cce8a0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 33020 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 1060 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 238581 ns
[JITPerf] apply_ternary() 243081 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887e9a80 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fc4d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6448660 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 33361 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 569 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 237711 ns
[JITPerf] apply_binary() 241902 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fa480 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 29 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887e9c80 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24041 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5950 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 304861 ns
[JITPerf] apply_binary_in_place() 306101 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887e9e80 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fc4d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a69e3a40 1 has_backanno: 0
[JITPerf] &JIT::construct 29 ns
[JITPerf] extract_inputs_helper() 33210 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 651 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 261452 ns
[JITPerf] apply_binary() 265721 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a64482e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887fda00 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23720 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5850 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 324771 ns
[JITPerf] apply_binary_in_place() 326111 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887fdc00 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fc4d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 111 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 31 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f29e40 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 34160 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 660 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 291222 ns
[JITPerf] apply_binary() 295582 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5ea5e30 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887fde00 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23300 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] update_ir() 5860 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 348512 ns
[JITPerf] apply_binary_in_place() 349782 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a80b7e60 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88875cba0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78cbab0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88875cba0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c895022d10 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88875cba0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894f894c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ecfd60 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] force_evaluate::RDUTensorImpl 110 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 10
[JITPerf] force_evaluate::PrepareIR 96020 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%64) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%72) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 300982 ns
[compiler:info] ====== HASH INFO: b3c9e48b67f1b96a6af41cba742937f40e38bf96ba088f9f692b46e75cb1c2bc
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.4.pef
[JITPerf] force_evaluate::CompilePEF 463042 ns
[JITPerf] force_evaluate::FilterInputs 56530 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 380933762 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5f11d10 to: 0x55c8a5eb8950
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88875cba0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 190 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5f11d10 to: 0x55c8a78f4990
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 450 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5eb8950 to: 0x55c8a5cb9610
[compiler:info]   Source: 49152 bytes with name  0x55c8a83636a0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a78f4990 to: 0x55c88875b9a0
[compiler:info]   Source: 49152 bytes with name  0x55c8a7df06c0
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 698864 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 1640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 792714 ns
[JITPerf] apply_binary() 802874 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a588d1d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] force_evaluate::RDUTensorImpl 151 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 17200 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 44920 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.2.pef
[JITPerf] force_evaluate::CompilePEF 94420 ns
[JITPerf] force_evaluate::FilterInputs 25860 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 369587278 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c894fa70c0 to: 0x55c88875cba0
[compiler:info]   Source: 12288 bytes with name  0x55c8a5bdfdc0
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 151 ns
[JITPerf] get_empty() 420 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 51 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6975bc0 to: 0x55c88875b9a0
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88875cba0 to: 0x55c8a7b36bd0
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7b36bd0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88875b9a0 to: 0x55c8a7b36bd0
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7b36bd0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 618632 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 1400 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 724423 ns
[JITPerf] apply_binary() 735104 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 16890 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] update_ir() 830 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 167001 ns
[JITPerf] apply_binary() 170801 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 51 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] extract_inputs_helper() 800 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 49 ns
[JITPerf] update_ir() 491 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 75031 ns
[JITPerf] apply_unary_out() 79480 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a5cb9610 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5cb9610 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] force_evaluate::RDUTensorImpl 110 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 2
[JITPerf] force_evaluate::PrepareIR 30420 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%4) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 74541 ns
[compiler:info] ====== HASH INFO: c3ea57317300daa100f6736c2a377cf6e056e235efce7e8c4b16238a03d78ddf
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.5.pef
[JITPerf] force_evaluate::CompilePEF 127030 ns
[JITPerf] force_evaluate::FilterInputs 29520 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 367116607 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5bdfdc0 to: 0x55c8a588d1d0
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ea2220 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 411 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5bdfdc0 to: 0x55c8a6b21b80
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 490 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a588d1d0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6b21b80 to: 0x55c88875cba0
[compiler:info]   Source: 49152 bytes with name  0x55c8a6a49590
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 545892 ns
[JITPerf] &JIT::construct 51 ns
[JITPerf] get_rdu_tensor_impl() 71 ns
[JITPerf] update_ir() 1560 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 644183 ns
[JITPerf] apply_binary() 648623 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7b36bd0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8950105d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ff3790 1 has_backanno: 0
[JITPerf] &JIT::construct 60 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] extract_inputs_helper() 351612 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 1380 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 426952 ns
[JITPerf] apply_binary_in_place() 428202 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ff3790 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888812540 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8950105d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ea2220 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 40430 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 117681 ns
[JITPerf] apply_binary() 122001 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ecfd60 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888812740 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 27240 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 8010 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 210111 ns
[JITPerf] apply_binary_in_place() 211321 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fc4d0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23820 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 780 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 173841 ns
[JITPerf] apply_binary() 179091 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 120 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888812940 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89a39eec0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 29970 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 660 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 186351 ns
[JITPerf] apply_ternary() 191081 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89a39f0c0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a8677320 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 51 ns
[JITPerf] get_empty() 71 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8950105d0 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 35440 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 550 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 161951 ns
[JITPerf] apply_binary() 166081 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a67b60e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 71 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89a39f2f0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23611 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5970 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 225550 ns
[JITPerf] apply_binary_in_place() 226741 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 49 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 10050 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 820 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 154630 ns
[JITPerf] apply_unary_out() 160370 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89bed2da0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a814e3e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6b1d2c0 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 32060 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 530 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 183570 ns
[JITPerf] apply_binary() 187400 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71e78c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89bed2fd0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23110 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5880 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 245661 ns
[JITPerf] apply_binary_in_place() 246911 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 9870 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 780 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 257111 ns
[JITPerf] apply_binary() 261981 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89bed3200 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887897a0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 31370 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 51 ns
[JITPerf] update_ir() 680 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 239861 ns
[JITPerf] apply_ternary() 244331 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887899d0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a85caf00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a588c810 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 33140 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 590 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 241271 ns
[JITPerf] apply_binary() 245431 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6047460 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888789c00 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23290 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] update_ir() 5980 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 300372 ns
[JITPerf] apply_binary_in_place() 301612 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88874e540 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a85caf00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f517c0 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 33170 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 650 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 263711 ns
[JITPerf] apply_binary() 267821 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e90830 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88874e740 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23281 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5860 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 327542 ns
[JITPerf] apply_binary_in_place() 328852 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88874e940 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a85caf00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c895027000 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 34340 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 89 ns
[JITPerf] update_ir() 651 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 288832 ns
[JITPerf] apply_binary() 292972 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5578b80 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88879f3d0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23030 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5870 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 346232 ns
[JITPerf] apply_binary_in_place() 347582 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78ee490 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5b71e00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a66e45b0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5b71e00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c895013b00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5b71e00 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71ec510 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc6700 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] force_evaluate::RDUTensorImpl 120 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 10
[JITPerf] force_evaluate::PrepareIR 96511 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%64) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%72) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 312731 ns
[compiler:info] ====== HASH INFO: b3c9e48b67f1b96a6af41cba742937f40e38bf96ba088f9f692b46e75cb1c2bc
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.4.pef
[JITPerf] force_evaluate::CompilePEF 467632 ns
[JITPerf] force_evaluate::FilterInputs 64491 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 370766323 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a93ee640 to: 0x55c8a7b36bd0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5b71e00 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 170 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a93ee640 to: 0x55c8a6ecfd60
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 431 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 80 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7b36bd0 to: 0x55c8a7e90830
[compiler:info]   Source: 49152 bytes with name  0x55c8a617db50
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6ecfd60 to: 0x55c8a5875b70
[compiler:info]   Source: 49152 bytes with name  0x55c8a6e4b0c0
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 815033 ns
[JITPerf] &JIT::construct 91 ns
[JITPerf] get_rdu_tensor_impl() 130 ns
[JITPerf] update_ir() 2180 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 949404 ns
[JITPerf] apply_binary() 956325 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a568a6c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] force_evaluate::RDUTensorImpl 240 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 27360 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 77520 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.2.pef
[JITPerf] force_evaluate::CompilePEF 147211 ns
[JITPerf] force_evaluate::FilterInputs 34340 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 371624618 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c8a93e0540 to: 0x55c8a5b71e00
[compiler:info]   Source: 12288 bytes with name  0x55c8a69d08d0
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 210 ns
[JITPerf] get_empty() 580 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6975bc0 to: 0x55c8a5875b70
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5b71e00 to: 0x55c894f47d80
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894f47d80 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5875b70 to: 0x55c894f47d80
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894f47d80 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 1038085 ns
[JITPerf] &JIT::construct 109 ns
[JITPerf] get_rdu_tensor_impl() 169 ns
[JITPerf] update_ir() 2571 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 1203726 ns
[JITPerf] apply_binary() 1220406 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_empty() 200 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 71 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 35661 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 211 ns
[JITPerf] update_ir() 2000 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 362012 ns
[JITPerf] apply_binary() 371081 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 100 ns
[JITPerf] get_empty() 150 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] extract_inputs_helper() 1910 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 140 ns
[JITPerf] update_ir() 1380 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 184881 ns
[JITPerf] apply_unary_out() 195851 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a7e90830 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e90830 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 91 ns
[JITPerf] force_evaluate::RDUTensorImpl 311 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 2
[JITPerf] force_evaluate::PrepareIR 61710 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%4) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 168231 ns
[compiler:info] ====== HASH INFO: c3ea57317300daa100f6736c2a377cf6e056e235efce7e8c4b16238a03d78ddf
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.5.pef
[JITPerf] force_evaluate::CompilePEF 294021 ns
[JITPerf] force_evaluate::FilterInputs 44150 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 371599618 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6975bc0 to: 0x55c8a568a6c0
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f3e3d0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 180 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6975bc0 to: 0x55c8a71be210
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 420 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 80 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a568a6c0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a71be210 to: 0x55c8a93ee1d0
[compiler:info]   Source: 49152 bytes with name  0x55c8a66d7960
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 771644 ns
[JITPerf] &JIT::construct 90 ns
[JITPerf] get_rdu_tensor_impl() 120 ns
[JITPerf] update_ir() 2170 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 922225 ns
[JITPerf] apply_binary() 929165 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894f47d80 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a67b60e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78d5810 1 has_backanno: 0
[JITPerf] &JIT::construct 100 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] extract_inputs_helper() 570203 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 120 ns
[JITPerf] update_ir() 2100 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 690903 ns
[JITPerf] apply_binary_in_place() 693043 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78d5810 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88879f5d0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a67b60e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 220 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 49 ns
[JITPerf] &JIT::construct 51 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f3e3d0 1 has_backanno: 0
[JITPerf] &JIT::construct 60 ns
[JITPerf] extract_inputs_helper() 68311 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 1020 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 197381 ns
[JITPerf] apply_binary() 204551 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc6700 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 49 ns
[JITPerf] get_rdu_tensor_impl() 109 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88879f7d0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 37911 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] update_ir() 11570 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 308112 ns
[JITPerf] apply_binary_in_place() 310102 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 120 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] &JIT::construct 50 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a85caf00 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 39131 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 51 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 110 ns
[JITPerf] update_ir() 1340 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 295762 ns
[JITPerf] apply_binary() 304422 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 230 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888794e90 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887950c0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 48950 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 109 ns
[JITPerf] update_ir() 1071 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 268891 ns
[JITPerf] apply_ternary() 277451 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887952c0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894f70240 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 110 ns
[JITPerf] get_empty() 120 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a67b60e0 1 has_backanno: 0
[JITPerf] &JIT::construct 50 ns
[JITPerf] extract_inputs_helper() 56961 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] update_ir() 870 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 272071 ns
[JITPerf] apply_binary() 279102 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fc1f0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 50 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887d01d0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 40860 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 49 ns
[JITPerf] &JIT::construct 51 ns
[JITPerf] &JIT::construct 49 ns
[JITPerf] get_rdu_tensor_impl() 150 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] update_ir() 9900 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 379402 ns
[JITPerf] apply_binary_in_place() 381482 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_empty() 110 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] extract_inputs_helper() 15190 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] update_ir() 1180 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 255581 ns
[JITPerf] apply_unary_out() 264801 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887d0400 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888719ac0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 120 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71b9540 1 has_backanno: 0
[JITPerf] &JIT::construct 50 ns
[JITPerf] extract_inputs_helper() 52790 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 940 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 308661 ns
[JITPerf] apply_binary() 315281 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f65950 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 49 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887d0630 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 37711 ns
[JITPerf] &JIT::construct 49 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 110 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] update_ir() 10110 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 418393 ns
[JITPerf] apply_binary_in_place() 420493 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 49 ns
[JITPerf] get_empty() 100 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] extract_inputs_helper() 17250 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 120 ns
[JITPerf] update_ir() 1310 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 413372 ns
[JITPerf] apply_binary() 421892 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_empty() 180 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88872bdc0 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88872bff0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 64110 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 110 ns
[JITPerf] update_ir() 1290 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 413262 ns
[JITPerf] apply_ternary() 420662 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88872c1f0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6e46920 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 89 ns
[JITPerf] get_empty() 129 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a63a11b0 1 has_backanno: 0
[JITPerf] &JIT::construct 60 ns
[JITPerf] extract_inputs_helper() 54710 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] update_ir() 950 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 403082 ns
[JITPerf] apply_binary() 410142 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93d4240 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 90 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888720540 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 38520 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 160 ns
[JITPerf] &JIT::construct 51 ns
[JITPerf] update_ir() 10160 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 513582 ns
[JITPerf] apply_binary_in_place() 515882 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888720740 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6e46920 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 69 ns
[JITPerf] get_empty() 140 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a59dc1f0 1 has_backanno: 0
[JITPerf] &JIT::construct 60 ns
[JITPerf] extract_inputs_helper() 55990 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] update_ir() 1090 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 443232 ns
[JITPerf] apply_binary() 450273 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6e4b980 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 90 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 50 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888720940 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 38610 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 49 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 110 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] update_ir() 10270 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 553273 ns
[JITPerf] apply_binary_in_place() 555473 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887f0560 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6e46920 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_empty() 170 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] &JIT::construct 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78eb870 1 has_backanno: 0
[JITPerf] &JIT::construct 60 ns
[JITPerf] extract_inputs_helper() 55661 ns
[JITPerf] &JIT::construct 49 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] update_ir() 1209 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 491132 ns
[JITPerf] apply_binary() 498333 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7118c10 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 50 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887f0760 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 37750 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 129 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] update_ir() 9960 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 587683 ns
[JITPerf] apply_binary_in_place() 589783 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5581490 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88871ca90 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a83eb970 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88871ca90 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894f55ce0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88871ca90 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88870f860 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5eab2d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 90 ns
[JITPerf] force_evaluate::RDUTensorImpl 190 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 10
[JITPerf] force_evaluate::PrepareIR 160721 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%64) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%72) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 511832 ns
[compiler:info] ====== HASH INFO: b3c9e48b67f1b96a6af41cba742937f40e38bf96ba088f9f692b46e75cb1c2bc
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.4.pef
[JITPerf] force_evaluate::CompilePEF 656183 ns
[JITPerf] force_evaluate::FilterInputs 57791 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 367744228 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a55b5790 to: 0x55c894f47d80
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88871ca90 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 140 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a55b5790 to: 0x55c8a6fc6700
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_empty() 530 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c894f47d80 to: 0x55c8a7f188b0
[compiler:info]   Source: 49152 bytes with name  0x55c8a7ff8370
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6fc6700 to: 0x55c894f7f7d0
[compiler:info]   Source: 49152 bytes with name  0x55c8a6ecef20
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 608482 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] update_ir() 1800 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 706763 ns
[JITPerf] apply_binary() 711223 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e17c30 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] force_evaluate::RDUTensorImpl 110 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 17401 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 45420 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.2.pef
[JITPerf] force_evaluate::CompilePEF 90450 ns
[JITPerf] force_evaluate::FilterInputs 25600 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 376501402 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c8a7dc4fb0 to: 0x55c88871ca90
[compiler:info]   Source: 12288 bytes with name  0x55c8a6b1e540
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 210 ns
[JITPerf] get_empty() 580 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a8086860 to: 0x55c894f7f7d0
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c88871ca90 to: 0x55c8a6f37600
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6f37600 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c894f7f7d0 to: 0x55c8a6f37600
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6f37600 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 1043725 ns
[JITPerf] &JIT::construct 110 ns
[JITPerf] get_rdu_tensor_impl() 160 ns
[JITPerf] update_ir() 2570 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 1211856 ns
[JITPerf] apply_binary() 1228566 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 190 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 70 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 35340 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_rdu_tensor_impl() 240 ns
[JITPerf] update_ir() 1740 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 338732 ns
[JITPerf] apply_binary() 347492 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 130 ns
[JITPerf] get_empty() 190 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] extract_inputs_helper() 1900 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 150 ns
[JITPerf] update_ir() 1210 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 163200 ns
[JITPerf] apply_unary_out() 174971 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a7f188b0 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f188b0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 70 ns
[JITPerf] force_evaluate::RDUTensorImpl 280 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 2
[JITPerf] force_evaluate::PrepareIR 56020 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%4) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 81981 ns
[compiler:info] ====== HASH INFO: c3ea57317300daa100f6736c2a377cf6e056e235efce7e8c4b16238a03d78ddf
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.5.pef
[JITPerf] force_evaluate::CompilePEF 123450 ns
[JITPerf] force_evaluate::FilterInputs 29251 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 365781919 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a8086860 to: 0x55c8a7e17c30
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7ea3670 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 150 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a8086860 to: 0x55c8a78ea8d0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_empty() 480 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7e17c30 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a78ea8d0 to: 0x55c8a7f5a120
[compiler:info]   Source: 49152 bytes with name  0x55c8a7ea14f0
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 559793 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] update_ir() 1650 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 656093 ns
[JITPerf] apply_binary() 660693 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6f37600 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fc1f0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7b51fd0 1 has_backanno: 0
[JITPerf] &JIT::construct 50 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 356421 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 69 ns
[JITPerf] update_ir() 1429 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 430012 ns
[JITPerf] apply_binary_in_place() 431192 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7b51fd0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887f0960 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fc1f0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7ea3670 1 has_backanno: 0
[JITPerf] &JIT::construct 31 ns
[JITPerf] extract_inputs_helper() 41151 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 116501 ns
[JITPerf] apply_binary() 120811 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5eab2d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89b807450 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 22970 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 69 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] update_ir() 7289 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 192851 ns
[JITPerf] apply_binary_in_place() 194001 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 60 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6e46920 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24140 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 91 ns
[JITPerf] update_ir() 820 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 178761 ns
[JITPerf] apply_binary() 183821 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 120 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89b807620 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89b807820 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 31070 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 49 ns
[JITPerf] update_ir() 691 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 167881 ns
[JITPerf] apply_ternary() 172691 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89b807a20 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5891b90 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fc1f0 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 34330 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 164231 ns
[JITPerf] apply_binary() 168770 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc0dd0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89af014a0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23450 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5910 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 226981 ns
[JITPerf] apply_binary_in_place() 228281 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 9870 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 830 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 155120 ns
[JITPerf] apply_unary_out() 160941 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89af01670 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93dcf20 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93bdcb0 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 33780 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 570 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 188021 ns
[JITPerf] apply_binary() 192151 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93cdde0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89af01870 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23140 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 6000 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 250451 ns
[JITPerf] apply_binary_in_place() 251641 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 60 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 10120 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 49 ns
[JITPerf] update_ir() 869 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 252241 ns
[JITPerf] apply_binary() 257281 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 100 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89af01a70 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89c1164a0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 31661 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 750 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 241262 ns
[JITPerf] apply_ternary() 245931 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89c1166a0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93c48d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93ca4b0 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 33540 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 590 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 243401 ns
[JITPerf] apply_binary() 247691 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a8026b70 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89c1168a0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23521 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5970 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 315642 ns
[JITPerf] apply_binary_in_place() 316922 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89c116a70 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93c48d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6a98ca0 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 34850 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 660 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 273502 ns
[JITPerf] apply_binary() 277972 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93e1820 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887db280 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23351 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 6000 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 329511 ns
[JITPerf] apply_binary_in_place() 330822 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887db480 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93c48d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 89 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 49 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93df8c0 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 33691 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 610 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 289331 ns
[JITPerf] apply_binary() 293662 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6976170 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887db680 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23120 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] update_ir() 6000 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 354992 ns
[JITPerf] apply_binary_in_place() 356312 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93e25e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a721d490 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c894f8c880 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a721d490 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93cf520 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a721d490 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6179590 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93e5a60 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 49 ns
[JITPerf] force_evaluate::RDUTensorImpl 129 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 10
[JITPerf] force_evaluate::PrepareIR 93881 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%64) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%72) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 312001 ns
[compiler:info] ====== HASH INFO: b3c9e48b67f1b96a6af41cba742937f40e38bf96ba088f9f692b46e75cb1c2bc
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.4.pef
[JITPerf] force_evaluate::CompilePEF 480983 ns
[JITPerf] force_evaluate::FilterInputs 54570 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 373487227 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a93cd490 to: 0x55c8a6f37600
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a721d490 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 170 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a93cd490 to: 0x55c8a5eab2d0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 840 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6f37600 to: 0x55c8a93e1820
[compiler:info]   Source: 49152 bytes with name  0x55c8a7dc8100
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5eab2d0 to: 0x55c8a66b1900
[compiler:info]   Source: 49152 bytes with name  0x55c8a78f2040
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 612153 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 1410 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 700453 ns
[JITPerf] apply_binary() 705604 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8858f44c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] force_evaluate::RDUTensorImpl 140 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 17680 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 46020 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.2.pef
[JITPerf] force_evaluate::CompilePEF 90081 ns
[JITPerf] force_evaluate::FilterInputs 26760 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 370776833 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c8a7fa45f0 to: 0x55c8a721d490
[compiler:info]   Source: 12288 bytes with name  0x55c8a678bf60
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 180 ns
[JITPerf] get_empty() 580 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 70 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5f1b620 to: 0x55c8a66b1900
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a721d490 to: 0x55c8a93d1e90
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93d1e90 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a66b1900 to: 0x55c8a93d1e90
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93d1e90 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 832944 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 140 ns
[JITPerf] update_ir() 2160 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 974124 ns
[JITPerf] apply_binary() 987845 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 27520 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 150 ns
[JITPerf] update_ir() 1370 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 263831 ns
[JITPerf] apply_binary() 270311 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] extract_inputs_helper() 1490 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 880 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 124780 ns
[JITPerf] apply_unary_out() 132330 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a93e1820 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93e1820 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] force_evaluate::RDUTensorImpl 200 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 2
[JITPerf] force_evaluate::PrepareIR 43170 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%4) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 112501 ns
[compiler:info] ====== HASH INFO: c3ea57317300daa100f6736c2a377cf6e056e235efce7e8c4b16238a03d78ddf
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.5.pef
[JITPerf] force_evaluate::CompilePEF 210921 ns
[JITPerf] force_evaluate::FilterInputs 38210 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 362760254 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5f1b620 to: 0x55c8858f44c0
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6f42550 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 160 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a5f1b620 to: 0x55c8a93e13b0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 500 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8858f44c0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a93e13b0 to: 0x55c8a93d1a20
[compiler:info]   Source: 49152 bytes with name  0x55c8a7e5c5d0
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 539422 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 1610 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 638363 ns
[JITPerf] apply_binary() 643083 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93d1e90 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc0dd0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7854280 1 has_backanno: 0
[JITPerf] &JIT::construct 70 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 366652 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 1370 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 439542 ns
[JITPerf] apply_binary_in_place() 440792 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7854280 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ae110 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc0dd0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6f42550 1 has_backanno: 0
[JITPerf] &JIT::construct 20 ns
[JITPerf] extract_inputs_helper() 41140 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 570 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 115241 ns
[JITPerf] apply_binary() 119590 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93e5a60 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887dc490 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23780 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 7500 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 192901 ns
[JITPerf] apply_binary_in_place() 194072 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93c48d0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24190 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 740 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 177130 ns
[JITPerf] apply_binary() 182300 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ae310 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ae510 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 29950 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 680 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 161700 ns
[JITPerf] apply_ternary() 166240 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887ae710 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93e5f20 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 49 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc0dd0 1 has_backanno: 0
[JITPerf] &JIT::construct 31 ns
[JITPerf] extract_inputs_helper() 34801 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 51 ns
[JITPerf] update_ir() 600 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 166031 ns
[JITPerf] apply_binary() 170431 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a805ef70 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888729950 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23090 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 6170 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 249891 ns
[JITPerf] apply_binary_in_place() 251141 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 51 ns
[JITPerf] get_empty() 91 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 9960 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 820 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 155710 ns
[JITPerf] apply_unary_out() 161350 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888729b50 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93e09f0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 31 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f0ab70 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 32980 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 530 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 184981 ns
[JITPerf] apply_binary() 189072 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc10d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 49 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888729d50 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23510 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] update_ir() 6320 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 250192 ns
[JITPerf] apply_binary_in_place() 251401 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 10580 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 800 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 246841 ns
[JITPerf] apply_binary() 251511 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 110 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888729f50 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89b803ea0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 33700 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 51 ns
[JITPerf] update_ir() 711 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 242001 ns
[JITPerf] apply_ternary() 246731 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89b8040a0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6976ef0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93e4c30 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 33570 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 680 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 240631 ns
[JITPerf] apply_binary() 244971 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fce4d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89b8042a0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23190 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 91 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] update_ir() 5960 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 302041 ns
[JITPerf] apply_binary_in_place() 303382 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c89b8044a0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6976ef0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 100 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a80251b0 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 36840 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 680 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 278171 ns
[JITPerf] apply_binary() 282581 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f1a2e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c899cd8fd0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23420 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] update_ir() 5880 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 334502 ns
[JITPerf] apply_binary_in_place() 335762 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c899cd91d0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6976ef0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f07780 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 33980 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 288201 ns
[JITPerf] apply_binary() 292781 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888714c40 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c899cd93d0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23380 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5890 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 351892 ns
[JITPerf] apply_binary_in_place() 353171 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f00fd0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a8248a40 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6e977e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a8248a40 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f18e50 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a8248a40 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6eca1c0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a769e760 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] force_evaluate::RDUTensorImpl 160 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 10
[JITPerf] force_evaluate::PrepareIR 91181 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%64) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%72) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 323421 ns
[compiler:info] ====== HASH INFO: b3c9e48b67f1b96a6af41cba742937f40e38bf96ba088f9f692b46e75cb1c2bc
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.4.pef
[JITPerf] force_evaluate::CompilePEF 477762 ns
[JITPerf] force_evaluate::FilterInputs 56410 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 372746904 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a66d7890 to: 0x55c8a93d1e90
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a8248a40 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 210 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a66d7890 to: 0x55c8a93e5a60
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 71 ns
[JITPerf] get_empty() 460 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a93d1e90 to: 0x55c8a62c8ba0
[compiler:info]   Source: 49152 bytes with name  0x55c8a5610a10
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a93e5a60 to: 0x55c894f77750
[compiler:info]   Source: 49152 bytes with name  0x55c8a7e37a00
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 1006376 ns
[JITPerf] &JIT::construct 109 ns
[JITPerf] get_rdu_tensor_impl() 169 ns
[JITPerf] update_ir() 2631 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 1168876 ns
[JITPerf] apply_binary() 1177476 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78bf430 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 70 ns
[JITPerf] force_evaluate::RDUTensorImpl 290 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 35000 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 102100 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.2.pef
[JITPerf] force_evaluate::CompilePEF 196052 ns
[JITPerf] force_evaluate::FilterInputs 39810 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 369796618 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c8a6ff9e30 to: 0x55c8a8248a40
[compiler:info]   Source: 12288 bytes with name  0x55c8a78bf600
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 240 ns
[JITPerf] get_empty() 750 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a668bf50 to: 0x55c894f77750
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a8248a40 to: 0x55c8a6fc10d0
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc10d0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c894f77750 to: 0x55c8a6fc10d0
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc10d0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 1037185 ns
[JITPerf] &JIT::construct 110 ns
[JITPerf] get_rdu_tensor_impl() 140 ns
[JITPerf] update_ir() 2480 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 1203885 ns
[JITPerf] apply_binary() 1220886 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 70 ns
[JITPerf] get_empty() 170 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 70 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 35590 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] &JIT::construct 70 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] &JIT::construct 69 ns
[JITPerf] &JIT::construct 71 ns
[JITPerf] &JIT::construct 71 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_rdu_tensor_impl() 150 ns
[JITPerf] update_ir() 1640 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 335552 ns
[JITPerf] apply_binary() 344231 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 120 ns
[JITPerf] get_empty() 170 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] extract_inputs_helper() 1820 ns
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_rdu_tensor_impl() 150 ns
[JITPerf] update_ir() 1210 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 164581 ns
[JITPerf] apply_unary_out() 174411 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a62c8ba0 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a62c8ba0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 91 ns
[JITPerf] force_evaluate::RDUTensorImpl 329 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 2
[JITPerf] force_evaluate::PrepareIR 56441 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%4) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 148480 ns
[compiler:info] ====== HASH INFO: c3ea57317300daa100f6736c2a377cf6e056e235efce7e8c4b16238a03d78ddf
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.5.pef
[JITPerf] force_evaluate::CompilePEF 270732 ns
[JITPerf] force_evaluate::FilterInputs 44290 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 366190172 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a668bf50 to: 0x55c8a78bf430
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a768b8f0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 160 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a668bf50 to: 0x55c8a77006a0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 480 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78bf430 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a77006a0 to: 0x55c8a54fd760
[compiler:info]   Source: 49152 bytes with name  0x55c8a6349850
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 550163 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 1750 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 647993 ns
[JITPerf] apply_binary() 652343 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6fc10d0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a805ef70 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 29 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a721d490 1 has_backanno: 0
[JITPerf] &JIT::construct 70 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 364621 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 1280 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 437792 ns
[JITPerf] apply_binary_in_place() 439032 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a721d490 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c899cd95d0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a805ef70 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 51 ns
[JITPerf] get_empty() 120 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a768b8f0 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 40750 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 590 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 114540 ns
[JITPerf] apply_binary() 118720 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a769e760 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88876bd80 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23630 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 7650 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 193991 ns
[JITPerf] apply_binary_in_place() 195161 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 60 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6976ef0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 33500 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] update_ir() 790 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 190561 ns
[JITPerf] apply_binary() 195441 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 51 ns
[JITPerf] get_empty() 140 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88876bf80 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88876c180 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 31160 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 680 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 166740 ns
[JITPerf] apply_ternary() 171311 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c88876c380 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7184980 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a805ef70 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 34950 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 600 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 165041 ns
[JITPerf] apply_binary() 169391 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6a4b3b0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887f7760 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 22560 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] update_ir() 5920 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 223451 ns
[JITPerf] apply_binary_in_place() 224671 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] extract_inputs_helper() 9160 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 740 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 150361 ns
[JITPerf] apply_unary_out() 155811 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887274e0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7073320 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93ae410 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 32630 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 560 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 183801 ns
[JITPerf] apply_binary() 187841 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5640410 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887276e0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 22930 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] update_ir() 5900 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 248191 ns
[JITPerf] apply_binary_in_place() 249411 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] extract_inputs_helper() 9840 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] update_ir() 840 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 242952 ns
[JITPerf] apply_binary() 249202 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887278e0 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888727ae0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 32420 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 710 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 241761 ns
[JITPerf] apply_ternary() 246171 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887aeaf0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5923cc0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a69a1c70 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 32590 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 609 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 240341 ns
[JITPerf] apply_binary() 244581 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a55b7610 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887aecf0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23409 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] update_ir() 5930 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 298061 ns
[JITPerf] apply_binary_in_place() 299381 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887aeef0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5923cc0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 90 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6ceb090 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 34250 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 600 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 261852 ns
[JITPerf] apply_binary() 266552 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6aec9f0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 49 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887af1b0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 26901 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5920 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 334202 ns
[JITPerf] apply_binary_in_place() 335442 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888758170 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5923cc0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_empty() 91 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 29 ns
[JITPerf] &JIT::construct 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a76a95c0 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 33151 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 670 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 286151 ns
[JITPerf] apply_binary() 290612 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6eaa580 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888758370 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 22410 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5800 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 376902 ns
[JITPerf] apply_binary_in_place() 378322 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6166e80 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71bc7b0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6f30380 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71bc7b0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93db010 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 768, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71bc7b0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {0, 1, 3, 2}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5dace60 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fbe40 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] force_evaluate::RDUTensorImpl 140 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 10
[JITPerf] force_evaluate::PrepareIR 99660 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda8", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %58 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %59 = "air.Permute"(%58) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %60 = "air.Matmul"(%57, %59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %61 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %62 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %63 = "air.Collect"(%61, %62) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %66 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %67 = "air.Permute"(%66) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %68 = "air.Matmul"(%65, %67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %69 = "air.Reshape"(%68) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %70 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %71 = "air.Collect"(%69, %70) {kConfigured = true, kLambda = @add_lambda8, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%64) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%72) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 311822 ns
[compiler:info] ====== HASH INFO: b3c9e48b67f1b96a6af41cba742937f40e38bf96ba088f9f692b46e75cb1c2bc
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.4.pef
[JITPerf] force_evaluate::CompilePEF 474752 ns
[JITPerf] force_evaluate::FilterInputs 57920 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 369794179 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7108d10 to: 0x55c8a6fc10d0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a71bc7b0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 64, 16}
[compiler:info]   strides: {12288, 64, 1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 211 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7108d10 to: 0x55c8a769e760
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_empty() 490 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 100 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6fc10d0 to: 0x55c8a6eaa580
[compiler:info]   Source: 49152 bytes with name  0x55c8a93cb550
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] empty for size: {12, 64, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a769e760 to: 0x55c8a6a53ad0
[compiler:info]   Source: 49152 bytes with name  0x55c8a93d6a60
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 1077405 ns
[JITPerf] &JIT::construct 110 ns
[JITPerf] get_rdu_tensor_impl() 200 ns
[JITPerf] update_ir() 2930 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 1244846 ns
[JITPerf] apply_binary() 1253916 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6f71730 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] div ...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[JITPerf] &JIT::construct 69 ns
[JITPerf] force_evaluate::RDUTensorImpl 351 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 1
[JITPerf] force_evaluate::PrepareIR 35360 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x64x16xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>, tensor<12x64x16xbf16>) -> tensor<12x16x16xbf16>
    "air.Output"(%2) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 102340 ns
[compiler:info] ====== HASH INFO: 07f09825fc27f03da6b49645ff81b03c9d653a401e5238eaba3c119bccd1048e
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.2.pef
[JITPerf] force_evaluate::CompilePEF 170791 ns
[JITPerf] force_evaluate::FilterInputs 25440 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 357290818 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c8a6e95610 to: 0x55c8a71bc7b0
[compiler:info]   Source: 12288 bytes with name  0x55c8a7e37ee0
[compiler:info]   Dest: 24576 bytes with name  0x0
[JITPerf] &JIT::construct 140 ns
[JITPerf] get_empty() 410 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7070040 to: 0x55c8a6a53ad0
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 8 bytes with name  0x0
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1, 12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a71bc7b0 to: 0x55c8a7dff0e0
[compiler:info]   Source: 24576 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7dff0e0 1 has_backanno: 0
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {1} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6a53ad0 to: 0x55c8a7dff0e0
[compiler:info]   Source: 8 bytes with name  0x0
[compiler:info]   Dest: 4 bytes with name  0x0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7dff0e0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 852564 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 100 ns
[JITPerf] update_ir() 1460 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 943404 ns
[JITPerf] apply_binary() 953914 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 31 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 17160 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 780 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 165680 ns
[JITPerf] apply_binary() 169490 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] extract_inputs_helper() 760 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 570 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 77210 ns
[JITPerf] apply_unary_out() 81670 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a6eaa580 0 has_backanno: 0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6eaa580 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 16}
[compiler:info]   strides: {3072, 256, 16, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 60 ns
[JITPerf] force_evaluate::RDUTensorImpl 151 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 2
[JITPerf] force_evaluate::PrepareIR 27700 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x12x16x16xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x1x1x16xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x1x1x16xbf16>, tensor<1xbf16>) -> tensor<1x1x1x16xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1xbf16>
    %2 = "air.Div"(%0, %1) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1xbf16>) -> tensor<1x12x16x16xbf16>
    %3 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x1x1x16xbf16>
    %4 = "air.Collect"(%2, %3) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>, tensor<1x1x1x16xbf16>) -> tensor<1x12x16x16xbf16>
    %5 = "air.Softmax"(%4) {kConfigured = true, kDim = 3 : i64, kNodeCategory = 1 : i64} : (tensor<1x12x16x16xbf16>) -> tensor<1x12x16x16xbf16>
    "air.Output"(%4) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
    "air.Output"(%5) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x12x16x16xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 68540 ns
[compiler:info] ====== HASH INFO: c3ea57317300daa100f6736c2a377cf6e056e235efce7e8c4b16238a03d78ddf
[compiler:info] Found cached PEF!!! /scratch/jobs/38941840/jit_out/jit_out.5.pef
[JITPerf] force_evaluate::CompilePEF 143361 ns
[JITPerf] force_evaluate::FilterInputs 27140 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 372430831 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 16} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7070040 to: 0x55c8a6f71730
[compiler:info]   Source: 12288 bytes with name  0x0
[compiler:info]   Dest: 12288 bytes with name  0x0
[compiler:info] [torch_rdu] expand ...  
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a85adc80 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 64, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu_cpu_fallback] _reshape_alias ...
[JITPerf] &JIT::construct 160 ns
[compiler:info] [torch_rdu] empty_strided ...
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a7070040 to: 0x55c8a6b0aed0
[compiler:info]   Source: 49152 bytes with name  0x0
[compiler:info]   Dest: 49152 bytes with name  0x0
[compiler:info] [torch_rdu] bmm ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_empty() 491 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6f71730 1 has_backanno: 0
[compiler:info] [torch_rdu] empty for size: {12, 16, 64} ...
[compiler:info] [torch_rdu] Copy from: 0x55c8a6b0aed0 to: 0x55c8a71bc7b0
[compiler:info]   Source: 49152 bytes with name  0x55c8a6b0b0e0
[compiler:info]   Dest: 49152 bytes with name  0x0
[JITPerf] extract_inputs_helper() 561062 ns
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_rdu_tensor_impl() 109 ns
[JITPerf] update_ir() 1520 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %2 = "air.Matmul"(%0, %1) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 655243 ns
[JITPerf] apply_binary() 659903 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7dff0e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 12, 16, 64}
[compiler:info]   strides: {12288, 1024, 64, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] permute ... 
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f1b000 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 12, 64}
[compiler:info]   strides: {12288, 64, 1024, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] empty for size: {1, 16, 12, 64} ...
[compiler:info] [torch_rdu] lazy_copy_from ...  
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[compiler:info] Creating new IR...
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6a4b3b0 1 has_backanno: 0
[JITPerf] &JIT::construct 60 ns
[compiler:info] Number of owners (pre): 1
[compiler:info] Number of other owners (pre): 1
[compiler:info] Number of owners (post): 2
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 359572 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 90 ns
[JITPerf] update_ir() 1300 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 431432 ns
[JITPerf] apply_binary_in_place() 432642 ns
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6a4b3b0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888758570 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f1b000 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 110 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a85adc80 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 40310 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 571 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 113461 ns
[JITPerf] apply_binary() 117711 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78fbe40 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888758770 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23460 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 7260 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 192451 ns
[JITPerf] apply_binary_in_place() 193581 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_empty() 60 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5923cc0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23400 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 790 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 175731 ns
[JITPerf] apply_binary() 180611 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 100 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888758970 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888772df0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 30400 ns
[JITPerf] &JIT::construct 50 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 660 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 163011 ns
[JITPerf] apply_ternary() 167501 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888772ff0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 3072}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7dc4bf0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 3072} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7f1b000 1 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] extract_inputs_helper() 34380 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 660 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 162590 ns
[JITPerf] apply_binary() 166830 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a7d93fc0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 3072}
[compiler:info]   strides: {49152, 3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 29 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887731f0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24050 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5950 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 226871 ns
[JITPerf] apply_binary_in_place() 228091 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 9270 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 50 ns
[JITPerf] update_ir() 740 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 148531 ns
[JITPerf] apply_unary_out() 154241 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887733f0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {3072, 768}
[compiler:info]   strides: {1, 3072}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a78dfce0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 3072}
[compiler:info]   strides: {3072, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 3072} mat2 dims: {3072, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 50 ns
[JITPerf] get_empty() 80 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a66d7c90 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 32310 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 590 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 182111 ns
[JITPerf] apply_binary() 186221 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6de5d50 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 30 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8887735f0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 23140 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5810 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 245971 ns
[JITPerf] apply_binary_in_place() 247171 ns
[compiler:info] [torch_rdu] add ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 9890 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] update_ir() 800 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 269471 ns
[JITPerf] apply_binary() 274381 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 49 ns
[JITPerf] get_empty() 129 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888731570 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888731770 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 37231 ns
[JITPerf] &JIT::construct 40 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 660 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 246461 ns
[JITPerf] apply_ternary() 251551 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888731940 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 768}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a6175270 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 768} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 80 ns
[JITPerf] get_empty() 100 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8949a4420 1 has_backanno: 0
[JITPerf] &JIT::construct 29 ns
[JITPerf] extract_inputs_helper() 34200 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 560 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 246512 ns
[JITPerf] apply_binary() 250821 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a588d4e0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 768}
[compiler:info]   strides: {12288, 768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 30 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888731b40 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24030 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 80 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 5750 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 302431 ns
[JITPerf] apply_binary_in_place() 303731 ns
[compiler:info] [torch_rdu] gelu ...
[JITPerf] &JIT::construct 40 ns
[JITPerf] get_empty() 70 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 9370 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 700 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%56) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %58 = "air.Gelu"(%57) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 229271 ns
[JITPerf] apply_unary_out() 234421 ns
[compiler:info] [torch_rdu] native_layer_norm ... 
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 130 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 49 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888731d10 1 has_backanno: 0
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888af07f0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 31431 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 680 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%56) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %58 = "air.Gelu"(%57) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %59 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %60 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %61 = "air.Reshape"(%59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %62 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %63 = "air.LayerNorm"(%58, %61, %62) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_ternary_() 276091 ns
[JITPerf] apply_ternary() 280752 ns
[compiler:info] [torch_rdu] Transpose tensors...
[compiler:info] TRANSPOSE permute {1, 0}
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888af09f0 1 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {768, 30522}
[compiler:info]   strides: {1, 768}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a93a1bb0 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {16, 768}
[compiler:info]   strides: {768, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] mm ... self dims: {16, 768} mat2 dims: {768, 30522} device_type: rdu:0 rdu:0
[JITPerf] &JIT::construct 60 ns
[JITPerf] get_empty() 60 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 40 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a8629260 1 has_backanno: 0
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 37050 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 40 ns
[JITPerf] update_ir() 600 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%56) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %58 = "air.Gelu"(%57) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %59 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %60 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %61 = "air.Reshape"(%59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %62 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %63 = "air.LayerNorm"(%58, %61, %62) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<30522x768xbf16>
    %66 = "air.Permute"(%65) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<30522x768xbf16>) -> tensor<768x30522xbf16>
    %67 = "air.Matmul"(%64, %66) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x30522xbf16>) -> tensor<16x30522xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 281811 ns
[JITPerf] apply_binary() 285931 ns
[compiler:info] [torch_rdu] _unsafe_view ...
[compiler:info] [torch_rdu] view ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c8a5f60e50 0 has_backanno: 0
[compiler:info] set_tensor_view:
[compiler:info]   sizes: {1, 16, 30522}
[compiler:info]   strides: {488352, 30522, 1}
[compiler:info]   offset: 0
[compiler:info] [torch_rdu] add_ ...
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 29 ns
[compiler:info] in place!
[JITPerf] &JIT::construct 29 ns
[compiler:info] [torch_rdu] alias ...
[compiler:info] RDU shallow_copy_and_detach &&1 0x55c888af0bf0 1 has_backanno: 0
[JITPerf] extract_inputs_helper() 24349 ns
[JITPerf] &JIT::construct 29 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 20 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_rdu_tensor_impl() 70 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] update_ir() 7330 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x30522xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<30522xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<30522xbf16>, tensor<1xbf16>) -> tensor<30522xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>, tensor<30522xbf16>) -> tensor<1x16x30522xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%56) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %58 = "air.Gelu"(%57) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %59 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %60 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %61 = "air.Reshape"(%59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %62 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %63 = "air.LayerNorm"(%58, %61, %62) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<30522x768xbf16>
    %66 = "air.Permute"(%65) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<30522x768xbf16>) -> tensor<768x30522xbf16>
    %67 = "air.Matmul"(%64, %66) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x30522xbf16>) -> tensor<16x30522xbf16>
    %68 = "air.Reshape"(%67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x30522xbf16>) -> tensor<1x16x30522xbf16>
    %69 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<30522xbf16>
    %70 = "air.Collect"(%68, %69) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>, tensor<30522xbf16>) -> tensor<1x16x30522xbf16>
    %71 = "air.Reshape"(%70) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>) -> tensor<16x30522xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_binary_() 351271 ns
[JITPerf] apply_binary_in_place() 352641 ns
[compiler:info] [torch_rdu] _softmax ...
[JITPerf] &JIT::construct 30 ns
[JITPerf] get_empty() 60 ns
[compiler:info] [torch_rdu] empty for size: {} ...
[JITPerf] get_rdu_tensor_impl() 30 ns
[JITPerf] &JIT::construct 30 ns
[JITPerf] extract_inputs_helper() 10001 ns
[JITPerf] &JIT::construct 31 ns
[JITPerf] get_rdu_tensor_impl() 60 ns
[JITPerf] update_ir() 709 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x30522xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<30522xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<30522xbf16>, tensor<1xbf16>) -> tensor<30522xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>, tensor<30522xbf16>) -> tensor<1x16x30522xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%56) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %58 = "air.Gelu"(%57) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %59 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %60 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %61 = "air.Reshape"(%59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %62 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %63 = "air.LayerNorm"(%58, %61, %62) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<30522x768xbf16>
    %66 = "air.Permute"(%65) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<30522x768xbf16>) -> tensor<768x30522xbf16>
    %67 = "air.Matmul"(%64, %66) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x30522xbf16>) -> tensor<16x30522xbf16>
    %68 = "air.Reshape"(%67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x30522xbf16>) -> tensor<1x16x30522xbf16>
    %69 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<30522xbf16>
    %70 = "air.Collect"(%68, %69) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>, tensor<30522xbf16>) -> tensor<1x16x30522xbf16>
    %71 = "air.Reshape"(%70) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>) -> tensor<16x30522xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x30522xbf16>) -> tensor<1x16x30522xbf16>
    %73 = "air.Softmax"(%72) {kConfigured = true, kDim = 2 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>) -> tensor<1x16x30522xbf16>
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] apply_unary() 276402 ns
[JITPerf] apply_unary_out() 282052 ns
[compiler:info] RDU shallow_copy_and_detach &1 0x55c8a7fd94d0 0 has_backanno: 0
[JITPerf] &JIT::construct 40 ns
[JITPerf] force_evaluate::RDUTensorImpl 190 ns
[compiler:info] Forcing evaluation...
[compiler:info] owning_ir_storage count: 12
[JITPerf] force_evaluate::PrepareIR 127321 ns
[compiler:info] module @program attributes {arc.AIRMappingDecisionIsSpatial = false, arc.kAIRAddnOpt = true, arc.kAIRBufferBeforeConcatAddn = false, arc.kAIRBufferNonRedundancy = "", arc.kAIRDPTilingOptimization = false, arc.kAIRDisableConcatStoreOpt = false, arc.kAIRDisableLoadTilerOptWithDimOrdering = false, arc.kAIRDisableOptimizeRereadBuffer = false, arc.kAIREnableSkipBufferExtensionOpt = false, arc.kAIREnableStoreTilerOptWithDimOrdering = false, arc.kAIRForceDRAMFirstThenP2P = false, arc.kAIRMappingDecisionGlobalNumBatches = 1 : i64, arc.kAIRMetaPipeWithOneIterationRemoval = false, arc.kAIRTransposeMatMulTransformation = false, arc.kAppName = "jit_out", arc.kArchMajor = 1 : i64, arc.kArchMinor = 0 : i64, arc.kBoxLayoutSize = 2 : i64, arc.kBoxLayoutType = 0 : i64, arc.kConcisePrinting = false, arc.kDataParallelBf16StochasticRounding = false, arc.kDataParallelBf16StochasticRoundingHighStaticBatchSize = false, arc.kDataParallelBf16StochasticRoundingSeedName = "", arc.kEliminateBufferTimeout = 100 : i64, arc.kExperimentalOptimization = true, arc.kExperimentalRAILCrossEntropy = false, arc.kExperimentalRAILCrossEntropyGrad = false, arc.kGenerateReference = true, arc.kGenerateTensorboard = false, arc.kHeuristicSliceLayouts = false, arc.kHeuristicTilerLayouts = true, arc.kLayoutTimeout = 1000 : i64, arc.kLegalizeDataflow = true, arc.kLegalizeSamples = false, arc.kMaximumGroupLatencyFactor = 5.000000e-02 : f32, arc.kMoveViews = false, arc.kOptimizeDramTransfers = false, arc.kOutputFolder = "/scratch/jobs/38941840", arc.kOverrideMaxFanout = 0 : i64, arc.kPefName = "jit_out", arc.kPlasmaIncludeReadStallCycles = false, arc.kPlasmaSkipInstrumentationOnRead0 = false, arc.kPlasmaSkipInstrumentationOnRead1 = false, arc.kPlasmaStageInstrumentation = "none", arc.kPrintSrcs = [], arc.kResourceAwareBuffers = false, arc.kSambaTuneGraph = false, arc.kSkipBufferBandwidthWeight = 1 : i64, arc.kSkipBufferMaxDepth = 4096 : i64, arc.kSkipBufferMaxFanin = 8 : i64, arc.kSkipBufferPmuWeight = 1 : i64, arc.kSplitSkipBuffer = true, arc.kStrictNodeNameOrdering = true, arc.kUseTBufferEverywhere = false, arc.kVerbose = true, mac.kDisableMacTiling = false, mac.kMacDisableMappingSort = false, mac.kMacDisableRetryLowerScalingFactor = false, mac.kMacEnableBufferTrialCompile = false, mac.kMacEnableHDRetryLowerVisibleResources = false, mac.kMacEnableNodeTrialCompile = false, mac.kMacEnableNodeTrialCompileLogging = false, mac.kMacIsUnrollingFirst = false, mac.kMacMaxTilingDepth = 0 : i64, mac.kMacOnlyCompileMac = false, mac.kMacPlot = false, mac.kMacPrintMappingIR = false, mac.kMacSectionCutBeamSearch = [2, 2], mac.kMacSplitCatAsStageBuffer = false, mac.kMacTemplateDBDir = "", mac.kMacTensorParallel = "none", mac.kMacUseHostFIFO = false}  {
  module @templates  {
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x30522xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<30522xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<30522xbf16>, tensor<1xbf16>) -> tensor<30522xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>, tensor<30522xbf16>) -> tensor<1x16x30522xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda7", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda6", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda5", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda4", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x3072xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<3072xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<3072xbf16>, tensor<1xbf16>) -> tensor<3072xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda3", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1xbf16>) -> tensor<1x16x768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda2", type = () -> ()} : () -> ()
    "air.Lambda"() ( {
      %0 = "air.lambda.input"() {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : () -> tensor<1x16x768xbf16>
      %1 = "air.lambda.input"() {kConfigured = true, kId = 1 : i64, kNodeCategory = 1 : i64} : () -> tensor<768xbf16>
      %2 = "air.Imm"() {kConfigured = true, kNodeCategory = 1 : i64, kValue = "1.000000"} : () -> tensor<1xbf16>
      %3 = "air.Mul"(%1, %2) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>, tensor<1xbf16>) -> tensor<768xbf16>
      %4 = "air.Add"(%0, %3) {kBinaryOp = true, kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
      "air.lambda.output"(%4) {kConfigured = true, kId = 0 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> ()
      "tlir.terminator"() {kConfigured = true, kUniqueId = 7 : i64} : () -> ()
    }) {kConfigured = true, kNodeCategory = 1 : i64, sym_name = "add_lambda1", type = () -> ()} : () -> ()
  }
  module @sections  {
    %0 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x12x64xbf16>
    %1 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x16xbf16>
    %2 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<12x16x64xbf16>
    %3 = "air.Matmul"(%1, %2) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x16xbf16>, tensor<12x16x64xbf16>) -> tensor<12x16x64xbf16>
    %4 = "air.Reshape"(%3) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<12x16x64xbf16>) -> tensor<1x12x16x64xbf16>
    %5 = "air.Permute"(%4) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [0 : index, 2 : index, 1 : index, 3 : index]} : (tensor<1x12x16x64xbf16>) -> tensor<1x16x12x64xbf16>
    %6 = "air.BroadcastInDim"(%5) {kConfigured = true, kDims = [1, 1, 1, 1], kNodeCategory = 1 : i64, kShape = [1, 16, 12, 64]} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x12x64xbf16>
    %7 = "air.Reshape"(%6) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x12x64xbf16>) -> tensor<1x16x768xbf16>
    %8 = "air.Reshape"(%7) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %9 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %10 = "air.Permute"(%9) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %11 = "air.Matmul"(%8, %10) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %12 = "air.Reshape"(%11) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %13 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %14 = "air.Collect"(%12, %13) {kConfigured = true, kLambda = @add_lambda1, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %15 = "air.Reshape"(%14) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %16 = "air.Reshape"(%15) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %17 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<1x16x768xbf16>
    %18 = "air.Collect"(%16, %17) {kConfigured = true, kLambda = @add_lambda2, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %19 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %20 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %21 = "air.Reshape"(%19) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %22 = "air.Reshape"(%20) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %23 = "air.LayerNorm"(%18, %21, %22) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %24 = "air.Reshape"(%23) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %25 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072x768xbf16>
    %26 = "air.Permute"(%25) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<3072x768xbf16>) -> tensor<768x3072xbf16>
    %27 = "air.Matmul"(%24, %26) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x3072xbf16>) -> tensor<16x3072xbf16>
    %28 = "air.Reshape"(%27) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %29 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<3072xbf16>
    %30 = "air.Collect"(%28, %29) {kConfigured = true, kLambda = @add_lambda3, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>, tensor<3072xbf16>) -> tensor<1x16x3072xbf16>
    %31 = "air.Reshape"(%30) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %32 = "air.Reshape"(%31) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %33 = "air.Gelu"(%32) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<1x16x3072xbf16>
    %34 = "air.Reshape"(%33) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x3072xbf16>) -> tensor<16x3072xbf16>
    %35 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x3072xbf16>
    %36 = "air.Permute"(%35) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x3072xbf16>) -> tensor<3072x768xbf16>
    %37 = "air.Matmul"(%34, %36) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x3072xbf16>, tensor<3072x768xbf16>) -> tensor<16x768xbf16>
    %38 = "air.Reshape"(%37) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %39 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %40 = "air.Collect"(%38, %39) {kConfigured = true, kLambda = @add_lambda4, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %41 = "air.Reshape"(%40) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %42 = "air.Reshape"(%41) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %43 = "air.Collect"(%42, %23) {kConfigured = true, kLambda = @add_lambda5, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %44 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %45 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %46 = "air.Reshape"(%44) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %47 = "air.Reshape"(%45) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %48 = "air.LayerNorm"(%43, %46, %47) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %49 = "air.Reshape"(%48) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %50 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768x768xbf16>
    %51 = "air.Permute"(%50) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<768x768xbf16>) -> tensor<768x768xbf16>
    %52 = "air.Matmul"(%49, %51) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x768xbf16>) -> tensor<16x768xbf16>
    %53 = "air.Reshape"(%52) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %54 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %55 = "air.Collect"(%53, %54) {kConfigured = true, kLambda = @add_lambda6, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768xbf16>) -> tensor<1x16x768xbf16>
    %56 = "air.Reshape"(%55) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %57 = "air.Reshape"(%56) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>) -> tensor<1x16x768xbf16>
    %58 = "air.Gelu"(%57) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<1x16x768xbf16>
    %59 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %60 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<768xbf16>
    %61 = "air.Reshape"(%59) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %62 = "air.Reshape"(%60) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<768xbf16>) -> tensor<768x1xbf16>
    %63 = "air.LayerNorm"(%58, %61, %62) {kAxis = 2 : i32, kConfigured = true, kEpsilon = 9.99999996E-13 : f32, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>, tensor<768x1xbf16>, tensor<768x1xbf16>) -> tensor<1x16x768xbf16>
    %64 = "air.Reshape"(%63) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x768xbf16>) -> tensor<16x768xbf16>
    %65 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<30522x768xbf16>
    %66 = "air.Permute"(%65) {kConfigured = true, kNodeCategory = 1 : i64, kPermutation = [1 : index, 0 : index]} : (tensor<30522x768xbf16>) -> tensor<768x30522xbf16>
    %67 = "air.Matmul"(%64, %66) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x768xbf16>, tensor<768x30522xbf16>) -> tensor<16x30522xbf16>
    %68 = "air.Reshape"(%67) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x30522xbf16>) -> tensor<1x16x30522xbf16>
    %69 = "air.Tensor"() {kConfigured = true, kIsWeight = false, kNodeCategory = 5 : i64} : () -> tensor<30522xbf16>
    %70 = "air.Collect"(%68, %69) {kConfigured = true, kLambda = @add_lambda7, kMacInfoName = "collect_default", kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>, tensor<30522xbf16>) -> tensor<1x16x30522xbf16>
    %71 = "air.Reshape"(%70) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>) -> tensor<16x30522xbf16>
    %72 = "air.Reshape"(%71) {kConfigured = true, kNodeCategory = 1 : i64} : (tensor<16x30522xbf16>) -> tensor<1x16x30522xbf16>
    %73 = "air.Softmax"(%72) {kConfigured = true, kDim = 2 : i64, kNodeCategory = 1 : i64} : (tensor<1x16x30522xbf16>) -> tensor<1x16x30522xbf16>
    "air.Output"(%6) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x12x64xbf16>) -> ()
    "air.Output"(%18) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%23) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%31) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x3072xbf16>) -> ()
    "air.Output"(%33) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x3072xbf16>) -> ()
    "air.Output"(%43) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%48) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%56) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x768xbf16>) -> ()
    "air.Output"(%58) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%63) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x768xbf16>) -> ()
    "air.Output"(%71) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<16x30522xbf16>) -> ()
    "air.Output"(%73) {kConfigured = true, kNodeCategory = 5 : i64} : (tensor<1x16x30522xbf16>) -> ()
  }
  module @schedule  {
  }
  module @rnn_function  {
  }
}
[JITPerf] force_evaluate::PopulateMeta 309991 ns
[compiler:info] ====== HASH INFO: e7f6b0b2a11912dec0d5947899df3366bbb56913497c209272e84af63316104e
[mac:warn] name collision detected for input_0
[mac:warn] name collision detected for input_1
[mac:warn] name collision detected for input_2
[mac:warn] name collision detected for air_Matmul_0
[mac:warn] name collision detected for air_Reshape_0
[mac:warn] name collision detected for Permute_1
[mac:warn] name collision detected for Permute_1
[mac:warn] name collision detected for air_BroadcastInDim_0
[mac:warn] name collision detected for air_Reshape_1
[mac:warn] name collision detected for air_Reshape_2
[mac:warn] name collision detected for input_3
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for air_Matmul_1
[mac:warn] name collision detected for air_Reshape_3
[mac:warn] name collision detected for input_4
[mac:warn] name collision detected for air_Collect_0
[mac:warn] name collision detected for air_Collect_0_unary
[mac:warn] name collision detected for air_Collect_0_binary1
[mac:warn] name collision detected for air_Reshape_4
[mac:warn] name collision detected for air_Reshape_5
[mac:warn] name collision detected for input_5
[mac:warn] name collision detected for air_Collect_1
[mac:warn] name collision detected for air_Collect_1_unary
[mac:warn] name collision detected for air_Collect_1_binary1
[mac:warn] name collision detected for input_6
[mac:warn] name collision detected for input_7
[mac:warn] name collision detected for air_Reshape_6
[mac:warn] name collision detected for air_Reshape_7
[mac:warn] name collision detected for air_LayerNorm_0
[mac:warn] name collision detected for air_Reshape_8
[mac:warn] name collision detected for input_8
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for air_Matmul_2
[mac:warn] name collision detected for air_Reshape_9
[mac:warn] name collision detected for input_9
[mac:warn] name collision detected for air_Collect_2
[mac:warn] name collision detected for air_Collect_2_unary
[mac:warn] name collision detected for air_Collect_2_binary1
[mac:warn] name collision detected for air_Reshape_10
[mac:warn] name collision detected for air_Reshape_11
[mac:warn] name collision detected for air_Gelu_0
[mac:warn] name collision detected for air_Reshape_12
[mac:warn] name collision detected for input_10
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for air_Matmul_3
[mac:warn] name collision detected for air_Reshape_13
[mac:warn] name collision detected for input_11
[mac:warn] name collision detected for air_Collect_3
[mac:warn] name collision detected for air_Collect_3_unary
[mac:warn] name collision detected for air_Collect_3_binary1
[mac:warn] name collision detected for air_Reshape_14
[mac:warn] name collision detected for air_Reshape_15
[mac:warn] name collision detected for air_Collect_4
[mac:warn] name collision detected for air_Collect_4_unary
[mac:warn] name collision detected for air_Collect_4_binary1
[mac:warn] name collision detected for input_12
[mac:warn] name collision detected for input_13
[mac:warn] name collision detected for air_Reshape_16
[mac:warn] name collision detected for air_Reshape_17
[mac:warn] name collision detected for air_LayerNorm_1
[mac:warn] name collision detected for air_Reshape_18
[mac:warn] name collision detected for input_14
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for air_Matmul_4
[mac:warn] name collision detected for air_Reshape_19
[mac:warn] name collision detected for input_15
[mac:warn] name collision detected for air_Collect_5
[mac:warn] name collision detected for air_Collect_5_unary
[mac:warn] name collision detected for air_Collect_5_binary1
[mac:warn] name collision detected for air_Reshape_20
[mac:warn] name collision detected for air_Reshape_21
[mac:warn] name collision detected for input_16
[mac:warn] name collision detected for input_17
[mac:warn] name collision detected for air_Reshape_22
[mac:warn] name collision detected for air_Reshape_23
[mac:warn] name collision detected for air_Reshape_24
[mac:warn] name collision detected for input_18
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for Permute_0
[mac:warn] name collision detected for air_Matmul_5
[mac:warn] name collision detected for air_Reshape_25
[mac:warn] name collision detected for input_19
[mac:warn] name collision detected for air_Collect_6
[mac:warn] name collision detected for air_Collect_6_unary
[mac:warn] name collision detected for air_Collect_6_binary1
[mac:warn] name collision detected for air_Reshape_26
[mac:warn] name collision detected for air_Softmax_0
[mac:warn] name collision detected for air_Output_0
[mac:warn] name collision detected for air_Output_1
[mac:warn] name collision detected for air_Output_2
[mac:warn] name collision detected for air_Output_3
[mac:warn] name collision detected for air_Output_4
[mac:warn] name collision detected for air_Output_5
[mac:warn] name collision detected for air_Output_6
[mac:warn] name collision detected for air_Output_7
[mac:warn] name collision detected for air_Output_8
[mac:warn] name collision detected for air_Output_9
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC575_AIRResourceAwarePeepholeOptIter converged after 2 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
MAC582_AIRToTLIRLoweringNestedLoopsIter converged after 2 iteration(s)
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
Updated RegionView start borders for 0 slice groups.
[mac:warn] Copy.cpp:163:0: [AIRToTLIRLowering] Precog Interjected: Converted TemporalConcat to use TBuffer.
[info    ] Total per-section passes: 77
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_tln_traffic_report.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.txt
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0_bandwidth_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.node_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pmu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.detailed_pcu_statistics.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out_0_0.template_names.csv
[info    ] Removed artifact file: /scratch/jobs/38941840/jit_out/jit_out.data
[info    ] Compiling graph for section 0
[mac:info] Building nameddims for graph jit_out
[mac:info] Analyze tiling for graph: jit_out
[mac:info] Mapping for graph jit_out
[mac:info] Set up stage ID and metapipe ID for section 1
[mac:info] Set up stage ID and metapipe ID for section 0
[mac:info] MAC decided on the following section cuts for graph jit_out
[mac:info] Amortized resources overall: 1.730000e+02 PCUs, 1.770000e+02 PMUs, projected latency: 1.210950e-03 s, FLOPS: 7.802993e-01 T/s, DDR_BW: 4.778930e+01 GB/s
[mac:info] Lowering to TLIR succeeded.
[rail:info] Logs are generated in /scratch/jobs/38941840/jit_out//rail_gen//rail_compile_logs for partition_0_0_.
[rail:warn] PrismInfo.cpp:1056:0: TComputeContext: zipmapreduce_tcomp may have wrong behavior with respect to datatype width since stage0 ALU is not programmed.
[rail:info] Compilation succeeded for partition_0_0_. Elapsed time:  1060ms
[info    ] Compiling graph for section 1
[rail:info] Logs are generated in /scratch/jobs/38941840/jit_out//rail_gen//rail_compile_logs for partition_1_0_.
[rail:info] Compilation succeeded for partition_1_0_. Elapsed time:  0ms
[info    ] [PASS] Running PRISM000_PreProcessPass0_1
[info    ] Generated utilization report file: /scratch/jobs/38941840/jit_out/jit_out.s0.utilization_report.txt
[info    ] Generated utilization report file: /scratch/jobs/38941840/jit_out/jit_out.s1.utilization_report.txt
[info    ] [PASS] Running PRISM001_FeedbackGenPass0_1
[info    ] [PASS] Running PRISM002_PlasmaIRPass0_1
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/sections_0_1
[compiler:info] Plasma compile succeeded.
[compiler:info] Starting Plasma compile at /scratch/jobs/38941840/jit_out/plasma_ir_modules/schedule_0_1
[compiler:info] Plasma compile succeeded.
[info    ] [PASS] Running PRISM003_PlasmaIRSymbolAllocExportPass0_1
[info    ] [PASS] Running PRISM004_LegalizeUtilizationPass0_1
[info    ] [PASS] Running PRISM005_LegalizeSocketConnectionsPass0_1
[info    ] [PASS] Running PRISM006_LayoutConsolidationPass0_1
[info    ] [PASS] Running PRISM007_PmuLoadStoreSetupPass0_1
[info    ] [PASS] Running PRISM008_FinalizeIoPass0_1
[info    ] [PASS] Running PRISM009_CollectConnectionPass0_1
[info    ] [PASS] Running PRISM010_NetworkValidationPass0_1
[info    ] [PASS] Running PRISM011_DramAnalyticalReportPass0_1
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 15728640 num_vector_without_request_length_overhead 1966080 reference_num_vector 732528
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 15728640 num_vector_without_request_length_overhead 1966080 reference_num_vector 732528
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 1536 num_vector_without_request_length_overhead 384 reference_num_vector 384
[warning ] [../prism/src/plasma/lib/Core/Unit/Agcu.cpp:2506] Large dram analysis difference: num_vector_with_request_length_overhead 1536 num_vector_without_request_length_overhead 384 reference_num_vector 384
[info    ] Logging dram analysis report to /scratch/jobs/38941840/jit_out/prism_gen/reports/dram_analysis.json
[info    ] [PASS] Running PRISM012_AsmIRGenPNRConnectPass0_1
[info    ] [PASS] Running PRISM013_PrintLoweringPass0_1
[info    ] [PASS] Running PRISM014_AsmIRResourceAllocationPass0_1
[info    ] [PASS] Running PRISM015_PmuExprCompilePass0_1
[info    ] [PASS] Running PRISM016_GroupAnnotationPass0_1
[info    ] [PASS] Running PRISM017_TemplateDataflowGraphPass0_1
[info    ] [PASS] Running PRISM018_BoxUtilizationLegalizerPass0_1
[info    ] [PASS] Running PRISM019_LegalizePartitionAssignmentPass0_1
[info    ] [PASS] Running PRISM020_ConditionValidationPass0_1
[info    ] [PASS] Running PRISM021_AssignMetapipeStagePass0_1
[info    ] [PASS] Running PRISM022_AnalyticalModelFileGenPass0_1
[info    ] [PASS] Running PRISM023_PlasmaIRProgramStatePass0_1
[info    ] [PASS] Running PRISM024_MetapipeStageLatencyPass0_1
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/MetapipeStageLatencyPass.cpp:635] Stage 76: Encountered gemm-like template BigGemm (biggemm_0_0_388) after streaming template Gelu (gelu_0_0_385), but gemm-like templates may only be adjacent to buffers!
[info    ] Generated metapipe stage graph dot file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_0_0.dot
[info    ] Generated metapipe stage graph dot file: /scratch/jobs/38941840/jit_out/stage_buffers/partition_latency_1_0.dot
[info    ] [PASS] Running PRISM025_MetapipeStageGraphPass0_1
[info    ] [PASS] Running PRISM026_BandwidthAnnotationPass0_1
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_1.BWP.0.0.log
[info    ] BandwidthAnnotationPropagation log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_1.BWP.0.0.log
[info    ] BandwidthAnnotationPropagation log for Partition{0, 1}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM026_BandwidthAnnotationPass0_1.BWP.0.1.log
[info    ] 

============ Bandwidth QA Report ============

Total edges: 555
Bandwidth starving edges before pass (src/sink < 0.8): 132 (23.7838%)
Bandwidth back pressure edges before pass (src/sink > 1.2): 129 (23.2432%)
Missing source bandwidth after pass: 0 (0%)
Missing sink bandwidth after pass: 0 (0%)

[info    ] [PASS] Running PRISM027_FilePlacementPass_GenEdgeId0_1
[info    ] [PASS] Running PRISM028_FloorplanPass0_1
[info    ] Floorplanning log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM028_FloorplanPass0_1.FP.0.0.log
[info    ] Floorplanning log for Partition{0, 1}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM028_FloorplanPass0_1.FP.0.1.log
[info    ] [PASS] Running PRISM029_VagAllocPass0_1
[info    ] [PASS] Running PRISM030_AsmIRPrePortAllocAsmTransformPass0_1
[info    ] [PASS MANAGER] Start PnR
[info    ] [PASS] Running PRISM031_PlacerPass0_1
[info    ] Prism config stored in: /scratch/jobs/38941840/jit_out/jit_out.configs
[info    ] Launching placement flow with (set) 1 threads
[info    ] BoxPlanner log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_1.BP.0.0.log
[info    ] WavefrontPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_1.DFG.0.0.log
[info    ] SAPlacer log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_1.SA.0.0.log
[info    ] BoxPlanner log for Partition{0, 1}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_1.BP.0.1.log
[info    ] WavefrontPlacer log for Partition{0, 1}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_1.DFG.0.1.log
[info    ] SAPlacer log for Partition{0, 1}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM031_PlacerPass0_1.SA.0.1.log
[info    ] Placement runtime:	partition{0, 0}: 0s	partition{0, 1}: 0s	
[info    ] [PASS] Running PRISM032_PmuTwinPass0_1
[info    ] [PASS] Running PRISM033_TemplateTileDoneLoweringPass0_1
[info    ] [PASS] Running PRISM034_VagConfigurePass0_1
[info    ] [PASS] Running PRISM035_VagAllocReportPass0_1
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/VagAllocReportPass.cpp:104] Found multiple batchsizes in input for timing group: ExecGroup batchsize: 24 vs 6
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/VagAllocReportPass.cpp:104] Found multiple batchsizes in input for timing group: ExecGroup batchsize: 24 vs 12
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/VagAllocReportPass.cpp:104] Found multiple batchsizes in input for timing group: ExecGroup batchsize: 24 vs 12
[info    ] [PASS] Running PRISM036_DataPortAllocatorPass0_1
[info    ] [PASS] Running PRISM037_AgcuOrchestrationPass0_1
[info    ] [PASS] Running PRISM038_RampControlPass0_1
[info    ] [PASS] Running PRISM039_E2EInjectionPass0_1
[info    ] [PASS] Running PRISM040_InstrumentationPreprocessPass0_1
[info    ] [PASS] Running PRISM041_BarrierLoweringPass0_1
[info    ] [PASS] Running PRISM042_ControlPortAllocatorPass0_1
[info    ] [PASS] Running PRISM043_ControlBandwidthAnnotationPass0_1
[info    ] [PASS] Running PRISM044_InstrumentationCounterPass0_1
[info    ] [PASS] Running PRISM045_ControlPortAllocatorPass0_1
[info    ] [PASS] Running PRISM046_ControlConnectorPass0_1
[info    ] [PASS] Running PRISM047_DataConnectorPass0_1
[info    ] [PASS MANAGER] Done with PnR
[info    ] [PASS] Running PRISM048_BandwidthReportPass0_1
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_1.VECTOR.0.0.log
[info    ] BandwidthReport log for Partition{0, 0}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_1.SCALAR.0.0.log
[info    ] BandwidthReport log for Partition{0, 1}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_1.VECTOR.0.1.log
[info    ] BandwidthReport log for Partition{0, 1}: /scratch/jobs/38941840/jit_out/prism_gen/plasma_compile_logs/PRISM048_BandwidthReportPass0_1.SCALAR.0.1.log
[info    ] [PASS] Running PRISM049_FeedbackGenPass0_1
[info    ] [PASS] Running PRISM050_ControlConnectionCodegenPass0_1
[info    ] [PASS] Running PRISM051_DataConnectionCodegenPass0_1
[info    ] [PASS] Running PRISM052_FinalizePass0_1
[info    ] [PASS] Running PRISM053_FinalizeSnapshotPass0_1
[info    ] [PASS] Running PRISM054_VagExprCompilePass0_1
[info    ] [PASS] Running PRISM055_WatermarkPass0_1
[info    ] [PASS] Running PRISM056_OrphanUnitPass0_1
[info    ] [PASS] Running PRISM057_BoxFileGenPass0_1
[info    ] [PASS] Running PRISM058_P2pPass0_1
[info    ] [PASS] Running PRISM059_AsmIRPostPortAllocAsmTransformPass0_1
[info    ] [PASS] Running PRISM060_DataSocketAnnotationPass0_1
[info    ] [PASS] Running PRISM061_AuroraFileGenPass0_1
[info    ] [PASS] Running PRISM062_AsmLegalizerPass0_1
[info    ] [PASS] Running PRISM063_ExpectedPacketCountAnnotationPass0_1
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:188] [Assembler] No counter chains found in streaming context, unable to determine expected_packet_count in gelu_0_0_385_output ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in biggemm_0_0_388_gemm_0_0_0_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in biggemm_0_0_388_gemm_0_0_1_PCU ctx0
[error   ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:284] [Assembler] multiple counter chains found in streaming context, unable to determine expected_packet_count in biggemm_0_0_388_gemm_0_0_2_PCU ctx0
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/ExpectedPacketCountAnnotationPass.cpp:188] [Assembler] No counter chains found in streaming context, unable to determine expected_packet_count in gelu_0_0_408_output ctx0
[info    ] [PASS] Running PRISM064_ConnectionPatchPass0_1
[info    ] [PASS] Running PRISM065_AsmPlasticineCodegen0_1
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6384] JitOut.partition_0_0_.rbuf1a_0_0_184_D_0_0 rd0_0 forcing early done for send insn: send CtrlPortOut(0) L0.early()  where asm would have chosen a late done for CH-1223
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6384] JitOut.partition_0_0_.rbuf1a_0_0_207_D_0_0 rd0_0 forcing early done for send insn: send CtrlPortOut(0) L0.early()  where asm would have chosen a late done for CH-1223
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6384] JitOut.partition_0_0_.rbuf1a_0_0_240_D_0_0 rd0_0 forcing early done for send insn: send CtrlPortOut(15) L0.early()  where asm would have chosen a late done for CH-1223
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6592] input_18_0_0_325_tilerFronting_pmu rd0_0 asm CtlOutXbar value (5) differs from set_signal (2)
[warning ] [../prism/src/assembler/lib/Codegen/PmuCodegen.cpp:6592] air_Collect0_used_by_air_Softmax_1_0_326_tilerFronting_pmu rd0_0 asm CtlOutXbar value (5) differs from set_signal (2)
[info    ] [PASS] Running PRISM066_ConnectionPatchPass0_1
[info    ] [PASS] Running PRISM067_PrintAsmPass_post_codegen0_1
[info    ] [PASS] Running PRISM068_PrintAsmPass_asm_ir_report0_1
[warning ] [../prism/src/plasma/lib/Core/Traversal/Analysis/RouteReportPass.cpp:34] Old report is not removed: /scratch/jobs/38941840/jit_out/jit_out_0_1.routes_report.txt
[info    ] [PASS] Running PRISM069_RouteReportPass0_1
[info    ] [PASS] Running PRISM070_AgcuFileGenPass0_1
[info    ] [PASS] Running PRISM071_CheckerPass0_1
[info    ] [PASS] Running PRISM072_ArgInsPass0_1
[info    ] [PASS] Running PRISM073_BitfileGenPass0_1
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.0.0.bin created
[info    ] bitfile /scratch/jobs/38941840/jit_out/jit_out.0.1.bin created
[info    ] [PASS] Running PRISM074_UtilizationFileGenPass0_1
[info    ] [PASS] Running PRISM075_PmuStatsPass0_1
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_1.pmu_stat_info.csv
[info    ] PMUStats: Writing /scratch/jobs/38941840/jit_out/jit_out_0_1.pmu_stat_ctx_info.csv
[info    ] [PASS] Running PRISM076_PostProcessSectionsPass0_1
[info    ] Freeing memory for compilation phase 0__1
[info    ] Incremental Passes for Section(s) 0__1 Completed.
[info    ] Incremental Passes Completed.
[info    ] [PASS] Running PRISM077_SymInitFunctionsPass
[info    ] [PASS] Running PRISM078_DataAllocPass
[info    ] [PASS] Running PRISM079_HostFifoPass
[info    ] [PASS] Running PRISM080_HostFunctionPass
[info    ] [PASS] Running PRISM081_DebugFileGenPass
[info    ] [PASS] Running PRISM082_PefGenPass
[info    ] symbol log file /scratch/jobs/38941840/jit_out/jit_out.symbol.log created
[info    ] PEF file /scratch/jobs/38941840/jit_out/jit_out.pef created
[info    ] PEF log file /scratch/jobs/38941840/jit_out/jit_out.pef.log created
[info    ] [PASS] Running PRISM083_DatafileGenPass
[info    ] datafile /scratch/jobs/38941840/jit_out/jit_out.data created
[info    ] Data log file /scratch/jobs/38941840/jit_out/jit_out.data.log created
[info    ] PnR node feedback file created /scratch/jobs/38941840/jit_out/jit_out.node_feedback.json
[info    ] PnR partition feedback file created /scratch/jobs/38941840/jit_out/jit_out.partition_feedback.json
[info    ] Global Passes Completed.
[arc:info] Generated debug_cpp files placed in: /scratch/jobs/38941840/jit_out/imcg_cpp/arc_gen/
[arc:info] Generated files placed in: /scratch/jobs/38941840/jit_out/arc_gen/
[arc:info] Compilation succeeded.
[mac:info] Mac Compilation succeeded.
[compiler:info] copy pef /scratch/jobs/38941840/jit_out/jit_out.pef to /scratch/jobs/38941840/jit_out/jit_out.6.pef
[compiler:info] Successfully compiled pef at /scratch/jobs/38941840/jit_out/jit_out.pef
[JITPerf] force_evaluate::CompilePEF 16914783542 ns
[JITPerf] force_evaluate::FilterInputs 93300 ns
Log ID initialized to: [surajk][python][237584] at /var/log/sambaflow/runtime/sn.log
[JITPerf] force_evaluate::Runtime 414346434 ns
[compiler:info] ============ PEF run finished and get tensors ========
[compiler:info] [torch_rdu] Copy from: 0x55c8a6b0b490 to: 0x55c8a6ecee50
[compiler:info]   Source: 1953408 bytes with name  0x55c8a7f68740
[compiler:info]   Dest: 1953408 bytes with name  0x0
[JITPerf] &JIT::construct 280 ns
[compiler:info] [torch_rdu] Copy from: 0x55c8a7fd94d0 to: 0x55c8a9edffb0
[compiler:info]   Source: 1953408 bytes with name  0x55c8a7135d20
[compiler:info]   Dest: 1953408 bytes with name  0x0
[JITPerf] &JIT::construct 190 ns
[compiler:info] [torch_rdu] Copy from: 0x55c8a7fd94d0 to: 0x55c8a5610b50
[compiler:info]   Source: 1953408 bytes with name  0x55c8a7135d20
[compiler:info]   Dest: 1953408 bytes with name  0x0
[JITPerf] &JIT::construct 200 ns
CPU Elapsed time  0.0615 seconds
RDU Elapsed time  23.0711 seconds
Total mismatches over threshold: 2835 out of 488352
Worst data mismatches: Actual(#1): tensor([ 0.0039,  0.0029, -0.0020, -0.0039, -0.0088,  0.0010,  0.0127,  0.0322,
        -0.0034,  0.0547], grad_fn=<IndexBackward0>), Expected(#2): tensor([ 0.2332, -0.2116, -0.2057,  0.1916, -0.2177, -0.1746, -0.2000, -0.2064,
         0.1449,  0.3451], grad_fn=<IndexBackward0>), 
Avg relative difference is 1.8288794026900677%, 
Worst abs difference: 0.290423184633255, worst rel diff: 199.02383089065552%
Tensor_0: 

CPU:
tensor([[[ -6.6462,  -6.6775,  -6.6606,  ...,  -5.9660,  -5.7844,  -4.1951],
         [-14.7222, -15.2151, -15.0513,  ..., -13.5289, -11.3960, -14.5610],
         [-10.1223, -10.7297, -10.1163,  ...,  -9.2822,  -7.6954, -15.4930],
         ...,
         [-10.7090, -11.2617, -10.9946,  ...,  -8.4994,  -9.6521, -14.2806],
         [-12.2987, -12.0131, -12.5270,  ..., -10.8341, -11.2091,  -5.0134],
         [-12.7292, -13.4996, -13.1655,  ..., -13.2183, -10.6310, -12.8908]]],
       grad_fn=<AddBackward0>)

RDU:
tensor([[[ -6.5938,  -6.6250,  -6.5625,  ...,  -5.9062,  -5.7500,  -4.1875],
         [-14.5625, -15.0000, -14.9375,  ..., -13.6250, -11.1250, -14.3750],
         [ -9.9375, -10.4375,  -9.9375,  ...,  -9.1250,  -7.5625, -15.1250],
         ...,
         [-10.5625, -11.1250, -11.0000,  ...,  -8.3750,  -9.3750, -14.2500],
         [-12.0625, -11.8750, -12.4375,  ..., -10.8125, -11.1250,  -5.0625],
         [-12.5625, -13.3750, -12.8750,  ..., -13.0000, -10.5000, -12.7500]]],
       grad_fn=<ToCopyBackward0>)
Tensor_1: 

CPU:
tensor([[[4.6513e-07, 4.5077e-07, 4.5846e-07,  ..., 9.1823e-07,
          1.1012e-06, 5.3960e-06],
         [8.9595e-16, 5.4728e-16, 6.4474e-16,  ..., 2.9549e-15,
          2.4936e-14, 1.0527e-15],
         [5.1252e-14, 2.7920e-14, 5.1564e-14,  ..., 1.1873e-13,
          5.8038e-13, 2.3837e-16],
         ...,
         [9.6592e-15, 5.5576e-15, 7.2593e-15,  ..., 8.8010e-14,
          2.7794e-14, 2.7154e-16],
         [5.2247e-17, 6.9513e-17, 4.1581e-17,  ..., 2.2601e-16,
          1.5532e-16, 7.6212e-14],
         [6.5715e-10, 3.0415e-10, 4.2482e-10,  ..., 4.0294e-10,
          5.3571e-09, 5.5908e-10]]], grad_fn=<SoftmaxBackward0>)

RDU:
tensor([[[4.7125e-07, 4.7125e-07, 5.0291e-07,  ..., 9.9838e-07,
          1.1325e-06, 5.3942e-06],
         [1.0408e-15, 6.3144e-16, 8.1185e-16,  ..., 2.8311e-15,
          3.4417e-14, 1.3392e-15],
         [7.2831e-14, 4.4187e-14, 7.2831e-14,  ..., 1.5454e-13,
          6.9278e-13, 3.8337e-16],
         ...,
         [1.2657e-14, 7.7161e-15, 7.7161e-15,  ..., 1.0614e-13,
          3.9080e-14, 2.9837e-16],
         [1.0972e-16, 1.4051e-16, 6.6787e-17,  ..., 3.8337e-16,
          2.3245e-16, 1.1990e-13],
         [7.3487e-10, 3.4743e-10, 5.7116e-10,  ..., 5.0568e-10,
          6.1700e-09, 6.4756e-10]]], grad_fn=<ToCopyBackward0>)
Compile count: 38
[JITPerf] &JIT::construct 80 ns
Pef count: 7
==========================================
RDU: The capital of France, paris, contains the Eiffel Tower.	|	CPU: The capital of France, paris, contains the Eiffel Tower.
RDU: The capital of France, lyon, contains the Eiffel Tower.	|	CPU: The capital of France, lyon, contains the Eiffel Tower.
RDU: The capital of France, lille, contains the Eiffel Tower.	|	CPU: The capital of France, lille, contains the Eiffel Tower.
RDU: The capital of France, marseille, contains the Eiffel Tower.	|	CPU: The capital of France, toulouse, contains the Eiffel Tower.
RDU: The capital of France, toulouse, contains the Eiffel Tower.	|	CPU: The capital of France, marseille, contains the Eiffel Tower.
==========================================
++ cat /proc/237582/cgroup
++ grep -oP '^.*:memory:\K.*$'
+ cat /sys/fs/cgroup/memory//slurm/uid_1447851142/job_38941840/step_batch/task_0/memory.max_usage_in_bytes
+ grep --text -oP 'slurmJobId=38941840.*Physical RDU ID: \K\d+' /var/log/sambaflow/runtime/sn.log
+ true
<181>2022-07-11T00:53:10.191987-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:10.267878-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:10.268059-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:14.263705-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:14.337227-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:14.337533-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:15.032986-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:15.109725-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:15.109906-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:16.115364-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:16.189144-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:16.189380-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:19.988398-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:20.061686-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:20.061862-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:20.362490-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:20.437206-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:20.437353-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:21.284983-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:21.358120-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:21.358215-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:21.681482-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:21.754844-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:21.755010-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:22.056964-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:22.130443-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:22.130595-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:22.428050-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:22.501016-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:22.501152-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:22.800372-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:22.873412-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:22.873566-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:23.169437-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:23.242339-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:23.242427-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:23.536496-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:23.610128-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:23.610350-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:23.913121-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:23.986345-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:23.986437-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:24.286840-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:24.360370-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:24.360459-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:24.649414-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:24.722256-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:24.722344-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:25.025134-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:25.098487-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:25.098582-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:25.398026-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:25.472078-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:25.472162-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:25.759149-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:25.832937-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:25.833020-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:26.125642-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:26.200998-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:26.201085-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:26.514074-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:26.589722-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:26.589807-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:26.879621-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:26.953604-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:26.953763-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:27.253816-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:27.328704-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:27.329107-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:27.626974-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:27.704918-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:27.705069-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:28.005211-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:28.079058-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:28.079229-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:28.383225-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:28.457140-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:28.457226-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:28.760636-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:28.834770-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:28.834840-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:29.131551-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:29.205495-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:29.205646-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:29.504117-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:29.578196-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:29.578347-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:29.880184-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:29.954376-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:29.954467-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:30.252608-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:30.326508-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:30.326660-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:30.622383-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:30.696741-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:30.696832-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:31.001390-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:31.080079-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:31.080265-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:31.371020-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:31.444877-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:31.445036-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:31.742491-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:31.816454-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:31.816741-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:32.114541-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:32.188754-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:32.188848-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:32.473636-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:32.547886-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:32.548056-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0
<181>2022-07-11T00:53:49.769363-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Resource Status: Allocation Success
<181>2022-07-11T00:53:49.843347-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] grdu_mask: 0
<181>2022-07-11T00:53:49.843518-07:00 sc2-s5 [surajk][python][237584]: [NOTICE][RSC][meta hostname=sc2-s5.sambanovasystems.com tid=237584 slurmJobId=38941840] Physical RDU 0

SlurmJobInfo(state='COMPLETED', elapsed_string='00:00:54', elapsed_seconds=54, start_time='2022-07-11T07:52:59', exit_code=0, exit_signal=0, host='sc2-s5', os='ubuntu 20.04')
